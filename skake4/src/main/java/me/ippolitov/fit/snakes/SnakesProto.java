// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snakes.proto

package me.ippolitov.fit.snakes;

public final class SnakesProto {
  private SnakesProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * Роль узла в топологии связей узлов в пределах игры
   * </pre>
   *
   * Protobuf enum {@code snakes.NodeRole}
   */
  public enum NodeRole
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Обычный узел, лист в топологии "звезда"
     * </pre>
     *
     * <code>NORMAL = 0;</code>
     */
    NORMAL(0),
    /**
     * <pre>
     * Главный узел, центр в топологии "звезда"
     * </pre>
     *
     * <code>MASTER = 1;</code>
     */
    MASTER(1),
    /**
     * <pre>
     * Заместитель главного узла
     * </pre>
     *
     * <code>DEPUTY = 2;</code>
     */
    DEPUTY(2),
    /**
     * <pre>
     * Наблюдатель, похож на NORMAL, но не имеет змеи в статусе ALIVE, только получает обновления статуса
     * </pre>
     *
     * <code>VIEWER = 3;</code>
     */
    VIEWER(3),
    ;

    /**
     * <pre>
     * Обычный узел, лист в топологии "звезда"
     * </pre>
     *
     * <code>NORMAL = 0;</code>
     */
    public static final int NORMAL_VALUE = 0;
    /**
     * <pre>
     * Главный узел, центр в топологии "звезда"
     * </pre>
     *
     * <code>MASTER = 1;</code>
     */
    public static final int MASTER_VALUE = 1;
    /**
     * <pre>
     * Заместитель главного узла
     * </pre>
     *
     * <code>DEPUTY = 2;</code>
     */
    public static final int DEPUTY_VALUE = 2;
    /**
     * <pre>
     * Наблюдатель, похож на NORMAL, но не имеет змеи в статусе ALIVE, только получает обновления статуса
     * </pre>
     *
     * <code>VIEWER = 3;</code>
     */
    public static final int VIEWER_VALUE = 3;


    @Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static NodeRole valueOf(int value) {
      return forNumber(value);
    }

    public static NodeRole forNumber(int value) {
      switch (value) {
        case 0: return NORMAL;
        case 1: return MASTER;
        case 2: return DEPUTY;
        case 3: return VIEWER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NodeRole>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        NodeRole> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NodeRole>() {
            @Override
            public NodeRole findValueByNumber(int number) {
              return NodeRole.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return NodeRoleVerifier.INSTANCE;
    }

    private static final class NodeRoleVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new NodeRoleVerifier();
            @Override
            public boolean isInRange(int number) {
              return NodeRole.forNumber(number) != null;
            }
          };

    private final int value;

    private NodeRole(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:snakes.NodeRole)
  }

  /**
   * <pre>
   * Тип игрока
   * </pre>
   *
   * Protobuf enum {@code snakes.PlayerType}
   */
  public enum PlayerType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Живой пользователь
     * </pre>
     *
     * <code>HUMAN = 0;</code>
     */
    HUMAN(0),
    /**
     * <pre>
     * Робот, управляет своей змеёй с помощью алгоритма (это не нужно реализовывать, но предусмотрено в протоколе на будущее)
     * </pre>
     *
     * <code>ROBOT = 1;</code>
     */
    ROBOT(1),
    ;

    /**
     * <pre>
     * Живой пользователь
     * </pre>
     *
     * <code>HUMAN = 0;</code>
     */
    public static final int HUMAN_VALUE = 0;
    /**
     * <pre>
     * Робот, управляет своей змеёй с помощью алгоритма (это не нужно реализовывать, но предусмотрено в протоколе на будущее)
     * </pre>
     *
     * <code>ROBOT = 1;</code>
     */
    public static final int ROBOT_VALUE = 1;


    @Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static PlayerType valueOf(int value) {
      return forNumber(value);
    }

    public static PlayerType forNumber(int value) {
      switch (value) {
        case 0: return HUMAN;
        case 1: return ROBOT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PlayerType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PlayerType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PlayerType>() {
            @Override
            public PlayerType findValueByNumber(int number) {
              return PlayerType.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return PlayerTypeVerifier.INSTANCE;
    }

    private static final class PlayerTypeVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new PlayerTypeVerifier();
            @Override
            public boolean isInRange(int number) {
              return PlayerType.forNumber(number) != null;
            }
          };

    private final int value;

    private PlayerType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:snakes.PlayerType)
  }

  /**
   * Protobuf enum {@code snakes.Direction}
   */
  public enum Direction
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Вверх (в отрицательном направлении оси y)
     * </pre>
     *
     * <code>UP = 1;</code>
     */
    UP(1),
    /**
     * <pre>
     * Вниз (в положительном направлении оси y)
     * </pre>
     *
     * <code>DOWN = 2;</code>
     */
    DOWN(2),
    /**
     * <pre>
     * Влево (в отрицательном направлении оси x)
     * </pre>
     *
     * <code>LEFT = 3;</code>
     */
    LEFT(3),
    /**
     * <pre>
     * Вправо (в положительном направлении оси x)
     * </pre>
     *
     * <code>RIGHT = 4;</code>
     */
    RIGHT(4),
    ;

    /**
     * <pre>
     * Вверх (в отрицательном направлении оси y)
     * </pre>
     *
     * <code>UP = 1;</code>
     */
    public static final int UP_VALUE = 1;
    /**
     * <pre>
     * Вниз (в положительном направлении оси y)
     * </pre>
     *
     * <code>DOWN = 2;</code>
     */
    public static final int DOWN_VALUE = 2;
    /**
     * <pre>
     * Влево (в отрицательном направлении оси x)
     * </pre>
     *
     * <code>LEFT = 3;</code>
     */
    public static final int LEFT_VALUE = 3;
    /**
     * <pre>
     * Вправо (в положительном направлении оси x)
     * </pre>
     *
     * <code>RIGHT = 4;</code>
     */
    public static final int RIGHT_VALUE = 4;


    @Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static Direction valueOf(int value) {
      return forNumber(value);
    }

    public static Direction forNumber(int value) {
      switch (value) {
        case 1: return UP;
        case 2: return DOWN;
        case 3: return LEFT;
        case 4: return RIGHT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Direction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Direction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Direction>() {
            @Override
            public Direction findValueByNumber(int number) {
              return Direction.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return DirectionVerifier.INSTANCE;
    }

    private static final class DirectionVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new DirectionVerifier();
            @Override
            public boolean isInRange(int number) {
              return Direction.forNumber(number) != null;
            }
          };

    private final int value;

    private Direction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:snakes.Direction)
  }

  public interface GamePlayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:snakes.GamePlayer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * мя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * мя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     * @return The name.
     */
    String getName();
    /**
     * <pre>
     * мя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     *
     * <code>required int32 id = 2;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     *
     * <code>required int32 id = 2;</code>
     * @return The id.
     */
    int getId();

    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional string ip_address = 3;</code>
     * @return Whether the ipAddress field is set.
     */
    boolean hasIpAddress();
    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional string ip_address = 3;</code>
     * @return The ipAddress.
     */
    String getIpAddress();
    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional string ip_address = 3;</code>
     * @return The bytes for ipAddress.
     */
    com.google.protobuf.ByteString
        getIpAddressBytes();

    /**
     * <pre>
     * Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional int32 port = 4;</code>
     * @return Whether the port field is set.
     */
    boolean hasPort();
    /**
     * <pre>
     * Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional int32 port = 4;</code>
     * @return The port.
     */
    int getPort();

    /**
     * <pre>
     * Роль узла в топологии
     * </pre>
     *
     * <code>required .snakes.NodeRole role = 5;</code>
     * @return Whether the role field is set.
     */
    boolean hasRole();
    /**
     * <pre>
     * Роль узла в топологии
     * </pre>
     *
     * <code>required .snakes.NodeRole role = 5;</code>
     * @return The role.
     */
    NodeRole getRole();

    /**
     * <pre>
     * Тип игрока
     * </pre>
     *
     * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <pre>
     * Тип игрока
     * </pre>
     *
     * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
     * @return The type.
     */
    PlayerType getType();

    /**
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     *
     * <code>required int32 score = 7;</code>
     * @return Whether the score field is set.
     */
    boolean hasScore();
    /**
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     *
     * <code>required int32 score = 7;</code>
     * @return The score.
     */
    int getScore();
  }
  /**
   * <pre>
   * грок
   * </pre>
   *
   * Protobuf type {@code snakes.GamePlayer}
   */
  public  static final class GamePlayer extends
      com.google.protobuf.GeneratedMessageLite<
          GamePlayer, GamePlayer.Builder> implements
      // @@protoc_insertion_point(message_implements:snakes.GamePlayer)
      GamePlayerOrBuilder {
    private GamePlayer() {
      name_ = "";
      ipAddress_ = "";
    }
    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private String name_;
    /**
     * <pre>
     * мя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     * @return Whether the name field is set.
     */
    @Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * мя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     * @return The name.
     */
    @Override
    public String getName() {
      return name_;
    }
    /**
     * <pre>
     * мя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     * @return The bytes for name.
     */
    @Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(name_);
    }
    /**
     * <pre>
     * мя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     * @param value The name to set.
     */
    private void setName(
        String value) {
      value.getClass();
  bitField0_ |= 0x00000001;
      name_ = value;
    }
    /**
     * <pre>
     * мя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = getDefaultInstance().getName();
    }
    /**
     * <pre>
     * мя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     * @param value The bytes for name to set.
     */
    private void setNameBytes(
        com.google.protobuf.ByteString value) {
      name_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static final int ID_FIELD_NUMBER = 2;
    private int id_;
    /**
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     *
     * <code>required int32 id = 2;</code>
     * @return Whether the id field is set.
     */
    @Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     *
     * <code>required int32 id = 2;</code>
     * @return The id.
     */
    @Override
    public int getId() {
      return id_;
    }
    /**
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     *
     * <code>required int32 id = 2;</code>
     * @param value The id to set.
     */
    private void setId(int value) {
      bitField0_ |= 0x00000002;
      id_ = value;
    }
    /**
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     *
     * <code>required int32 id = 2;</code>
     */
    private void clearId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      id_ = 0;
    }

    public static final int IP_ADDRESS_FIELD_NUMBER = 3;
    private String ipAddress_;
    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional string ip_address = 3;</code>
     * @return Whether the ipAddress field is set.
     */
    @Override
    public boolean hasIpAddress() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional string ip_address = 3;</code>
     * @return The ipAddress.
     */
    @Override
    public String getIpAddress() {
      return ipAddress_;
    }
    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional string ip_address = 3;</code>
     * @return The bytes for ipAddress.
     */
    @Override
    public com.google.protobuf.ByteString
        getIpAddressBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(ipAddress_);
    }
    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional string ip_address = 3;</code>
     * @param value The ipAddress to set.
     */
    private void setIpAddress(
        String value) {
      value.getClass();
  bitField0_ |= 0x00000004;
      ipAddress_ = value;
    }
    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional string ip_address = 3;</code>
     */
    private void clearIpAddress() {
      bitField0_ = (bitField0_ & ~0x00000004);
      ipAddress_ = getDefaultInstance().getIpAddress();
    }
    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional string ip_address = 3;</code>
     * @param value The bytes for ipAddress to set.
     */
    private void setIpAddressBytes(
        com.google.protobuf.ByteString value) {
      ipAddress_ = value.toStringUtf8();
      bitField0_ |= 0x00000004;
    }

    public static final int PORT_FIELD_NUMBER = 4;
    private int port_;
    /**
     * <pre>
     * Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional int32 port = 4;</code>
     * @return Whether the port field is set.
     */
    @Override
    public boolean hasPort() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional int32 port = 4;</code>
     * @return The port.
     */
    @Override
    public int getPort() {
      return port_;
    }
    /**
     * <pre>
     * Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional int32 port = 4;</code>
     * @param value The port to set.
     */
    private void setPort(int value) {
      bitField0_ |= 0x00000008;
      port_ = value;
    }
    /**
     * <pre>
     * Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
     * </pre>
     *
     * <code>optional int32 port = 4;</code>
     */
    private void clearPort() {
      bitField0_ = (bitField0_ & ~0x00000008);
      port_ = 0;
    }

    public static final int ROLE_FIELD_NUMBER = 5;
    private int role_;
    /**
     * <pre>
     * Роль узла в топологии
     * </pre>
     *
     * <code>required .snakes.NodeRole role = 5;</code>
     * @return Whether the role field is set.
     */
    @Override
    public boolean hasRole() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Роль узла в топологии
     * </pre>
     *
     * <code>required .snakes.NodeRole role = 5;</code>
     * @return The role.
     */
    @Override
    public NodeRole getRole() {
      NodeRole result = NodeRole.forNumber(role_);
      return result == null ? NodeRole.NORMAL : result;
    }
    /**
     * <pre>
     * Роль узла в топологии
     * </pre>
     *
     * <code>required .snakes.NodeRole role = 5;</code>
     * @param value The role to set.
     */
    private void setRole(NodeRole value) {
      role_ = value.getNumber();
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * Роль узла в топологии
     * </pre>
     *
     * <code>required .snakes.NodeRole role = 5;</code>
     */
    private void clearRole() {
      bitField0_ = (bitField0_ & ~0x00000010);
      role_ = 0;
    }

    public static final int TYPE_FIELD_NUMBER = 6;
    private int type_;
    /**
     * <pre>
     * Тип игрока
     * </pre>
     *
     * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
     * @return Whether the type field is set.
     */
    @Override
    public boolean hasType() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Тип игрока
     * </pre>
     *
     * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
     * @return The type.
     */
    @Override
    public PlayerType getType() {
      PlayerType result = PlayerType.forNumber(type_);
      return result == null ? PlayerType.HUMAN : result;
    }
    /**
     * <pre>
     * Тип игрока
     * </pre>
     *
     * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
     * @param value The type to set.
     */
    private void setType(PlayerType value) {
      type_ = value.getNumber();
      bitField0_ |= 0x00000020;
    }
    /**
     * <pre>
     * Тип игрока
     * </pre>
     *
     * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
     */
    private void clearType() {
      bitField0_ = (bitField0_ & ~0x00000020);
      type_ = 0;
    }

    public static final int SCORE_FIELD_NUMBER = 7;
    private int score_;
    /**
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     *
     * <code>required int32 score = 7;</code>
     * @return Whether the score field is set.
     */
    @Override
    public boolean hasScore() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     *
     * <code>required int32 score = 7;</code>
     * @return The score.
     */
    @Override
    public int getScore() {
      return score_;
    }
    /**
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     *
     * <code>required int32 score = 7;</code>
     * @param value The score to set.
     */
    private void setScore(int value) {
      bitField0_ |= 0x00000040;
      score_ = value;
    }
    /**
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     *
     * <code>required int32 score = 7;</code>
     */
    private void clearScore() {
      bitField0_ = (bitField0_ & ~0x00000040);
      score_ = 0;
    }

    public static GamePlayer parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GamePlayer parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GamePlayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GamePlayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GamePlayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GamePlayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GamePlayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GamePlayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GamePlayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static GamePlayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GamePlayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GamePlayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(GamePlayer prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * грок
     * </pre>
     *
     * Protobuf type {@code snakes.GamePlayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          GamePlayer, Builder> implements
        // @@protoc_insertion_point(builder_implements:snakes.GamePlayer)
        GamePlayerOrBuilder {
      // Construct using me.ippolitov.fit.snakes.SnakesProto.GamePlayer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * мя игрока (для отображения в интерфейсе)
       * </pre>
       *
       * <code>required string name = 1;</code>
       * @return Whether the name field is set.
       */
      @Override
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <pre>
       * мя игрока (для отображения в интерфейсе)
       * </pre>
       *
       * <code>required string name = 1;</code>
       * @return The name.
       */
      @Override
      public String getName() {
        return instance.getName();
      }
      /**
       * <pre>
       * мя игрока (для отображения в интерфейсе)
       * </pre>
       *
       * <code>required string name = 1;</code>
       * @return The bytes for name.
       */
      @Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        return instance.getNameBytes();
      }
      /**
       * <pre>
       * мя игрока (для отображения в интерфейсе)
       * </pre>
       *
       * <code>required string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          String value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <pre>
       * мя игрока (для отображения в интерфейсе)
       * </pre>
       *
       * <code>required string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }
      /**
       * <pre>
       * мя игрока (для отображения в интерфейсе)
       * </pre>
       *
       * <code>required string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * Уникальный идентификатор игрока в пределах игры
       * </pre>
       *
       * <code>required int32 id = 2;</code>
       * @return Whether the id field is set.
       */
      @Override
      public boolean hasId() {
        return instance.hasId();
      }
      /**
       * <pre>
       * Уникальный идентификатор игрока в пределах игры
       * </pre>
       *
       * <code>required int32 id = 2;</code>
       * @return The id.
       */
      @Override
      public int getId() {
        return instance.getId();
      }
      /**
       * <pre>
       * Уникальный идентификатор игрока в пределах игры
       * </pre>
       *
       * <code>required int32 id = 2;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(int value) {
        copyOnWrite();
        instance.setId(value);
        return this;
      }
      /**
       * <pre>
       * Уникальный идентификатор игрока в пределах игры
       * </pre>
       *
       * <code>required int32 id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        copyOnWrite();
        instance.clearId();
        return this;
      }

      /**
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
       * </pre>
       *
       * <code>optional string ip_address = 3;</code>
       * @return Whether the ipAddress field is set.
       */
      @Override
      public boolean hasIpAddress() {
        return instance.hasIpAddress();
      }
      /**
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
       * </pre>
       *
       * <code>optional string ip_address = 3;</code>
       * @return The ipAddress.
       */
      @Override
      public String getIpAddress() {
        return instance.getIpAddress();
      }
      /**
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
       * </pre>
       *
       * <code>optional string ip_address = 3;</code>
       * @return The bytes for ipAddress.
       */
      @Override
      public com.google.protobuf.ByteString
          getIpAddressBytes() {
        return instance.getIpAddressBytes();
      }
      /**
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
       * </pre>
       *
       * <code>optional string ip_address = 3;</code>
       * @param value The ipAddress to set.
       * @return This builder for chaining.
       */
      public Builder setIpAddress(
          String value) {
        copyOnWrite();
        instance.setIpAddress(value);
        return this;
      }
      /**
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
       * </pre>
       *
       * <code>optional string ip_address = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearIpAddress() {
        copyOnWrite();
        instance.clearIpAddress();
        return this;
      }
      /**
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
       * </pre>
       *
       * <code>optional string ip_address = 3;</code>
       * @param value The bytes for ipAddress to set.
       * @return This builder for chaining.
       */
      public Builder setIpAddressBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIpAddressBytes(value);
        return this;
      }

      /**
       * <pre>
       * Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
       * </pre>
       *
       * <code>optional int32 port = 4;</code>
       * @return Whether the port field is set.
       */
      @Override
      public boolean hasPort() {
        return instance.hasPort();
      }
      /**
       * <pre>
       * Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
       * </pre>
       *
       * <code>optional int32 port = 4;</code>
       * @return The port.
       */
      @Override
      public int getPort() {
        return instance.getPort();
      }
      /**
       * <pre>
       * Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
       * </pre>
       *
       * <code>optional int32 port = 4;</code>
       * @param value The port to set.
       * @return This builder for chaining.
       */
      public Builder setPort(int value) {
        copyOnWrite();
        instance.setPort(value);
        return this;
      }
      /**
       * <pre>
       * Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
       * </pre>
       *
       * <code>optional int32 port = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearPort() {
        copyOnWrite();
        instance.clearPort();
        return this;
      }

      /**
       * <pre>
       * Роль узла в топологии
       * </pre>
       *
       * <code>required .snakes.NodeRole role = 5;</code>
       * @return Whether the role field is set.
       */
      @Override
      public boolean hasRole() {
        return instance.hasRole();
      }
      /**
       * <pre>
       * Роль узла в топологии
       * </pre>
       *
       * <code>required .snakes.NodeRole role = 5;</code>
       * @return The role.
       */
      @Override
      public NodeRole getRole() {
        return instance.getRole();
      }
      /**
       * <pre>
       * Роль узла в топологии
       * </pre>
       *
       * <code>required .snakes.NodeRole role = 5;</code>
       * @param value The enum numeric value on the wire for role to set.
       * @return This builder for chaining.
       */
      public Builder setRole(NodeRole value) {
        copyOnWrite();
        instance.setRole(value);
        return this;
      }
      /**
       * <pre>
       * Роль узла в топологии
       * </pre>
       *
       * <code>required .snakes.NodeRole role = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearRole() {
        copyOnWrite();
        instance.clearRole();
        return this;
      }

      /**
       * <pre>
       * Тип игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
       * @return Whether the type field is set.
       */
      @Override
      public boolean hasType() {
        return instance.hasType();
      }
      /**
       * <pre>
       * Тип игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
       * @return The type.
       */
      @Override
      public PlayerType getType() {
        return instance.getType();
      }
      /**
       * <pre>
       * Тип игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setType(PlayerType value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <pre>
       * Тип игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       * Число очков, которые набрал игрок
       * </pre>
       *
       * <code>required int32 score = 7;</code>
       * @return Whether the score field is set.
       */
      @Override
      public boolean hasScore() {
        return instance.hasScore();
      }
      /**
       * <pre>
       * Число очков, которые набрал игрок
       * </pre>
       *
       * <code>required int32 score = 7;</code>
       * @return The score.
       */
      @Override
      public int getScore() {
        return instance.getScore();
      }
      /**
       * <pre>
       * Число очков, которые набрал игрок
       * </pre>
       *
       * <code>required int32 score = 7;</code>
       * @param value The score to set.
       * @return This builder for chaining.
       */
      public Builder setScore(int value) {
        copyOnWrite();
        instance.setScore(value);
        return this;
      }
      /**
       * <pre>
       * Число очков, которые набрал игрок
       * </pre>
       *
       * <code>required int32 score = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearScore() {
        copyOnWrite();
        instance.clearScore();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:snakes.GamePlayer)
    }
    private byte memoizedIsInitialized = 2;
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new GamePlayer();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "bitField0_",
              "name_",
              "id_",
              "ipAddress_",
              "port_",
              "role_",
              NodeRole.internalGetVerifier(),
              "type_",
              PlayerType.internalGetVerifier(),
              "score_",
            };
            String info =
                "\u0001\u0007\u0000\u0001\u0001\u0007\u0007\u0000\u0000\u0004\u0001\u1508\u0000\u0002" +
                "\u1504\u0001\u0003\u1008\u0002\u0004\u1004\u0003\u0005\u150c\u0004\u0006\u100c\u0005" +
                "\u0007\u1504\u0006";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<GamePlayer> parser = PARSER;
          if (parser == null) {
            synchronized (GamePlayer.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<GamePlayer>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:snakes.GamePlayer)
    private static final GamePlayer DEFAULT_INSTANCE;
    static {
      GamePlayer defaultInstance = new GamePlayer();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        GamePlayer.class, defaultInstance);
    }

    public static GamePlayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GamePlayer> PARSER;

    public static com.google.protobuf.Parser<GamePlayer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GameConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:snakes.GameConfig)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 width = 1 [default = 40];</code>
     * @return Whether the width field is set.
     */
    boolean hasWidth();
    /**
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 width = 1 [default = 40];</code>
     * @return The width.
     */
    int getWidth();

    /**
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 height = 2 [default = 30];</code>
     * @return Whether the height field is set.
     */
    boolean hasHeight();
    /**
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 height = 2 [default = 30];</code>
     * @return The height.
     */
    int getHeight();

    /**
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     *
     * <code>optional int32 food_static = 3 [default = 1];</code>
     * @return Whether the foodStatic field is set.
     */
    boolean hasFoodStatic();
    /**
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     *
     * <code>optional int32 food_static = 3 [default = 1];</code>
     * @return The foodStatic.
     */
    int getFoodStatic();

    /**
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
     * </pre>
     *
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     * @return Whether the stateDelayMs field is set.
     */
    boolean hasStateDelayMs();
    /**
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
     * </pre>
     *
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     * @return The stateDelayMs.
     */
    int getStateDelayMs();
  }
  /**
   * <pre>
   * Параметры идущей игры (не должны меняться в процессе игры) 
   * </pre>
   *
   * Protobuf type {@code snakes.GameConfig}
   */
  public  static final class GameConfig extends
      com.google.protobuf.GeneratedMessageLite<
          GameConfig, GameConfig.Builder> implements
      // @@protoc_insertion_point(message_implements:snakes.GameConfig)
      GameConfigOrBuilder {
    private GameConfig() {
      width_ = 40;
      height_ = 30;
      foodStatic_ = 1;
      stateDelayMs_ = 1000;
    }
    private int bitField0_;
    public static final int WIDTH_FIELD_NUMBER = 1;
    private int width_;
    /**
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 width = 1 [default = 40];</code>
     * @return Whether the width field is set.
     */
    @Override
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 width = 1 [default = 40];</code>
     * @return The width.
     */
    @Override
    public int getWidth() {
      return width_;
    }
    /**
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 width = 1 [default = 40];</code>
     * @param value The width to set.
     */
    private void setWidth(int value) {
      bitField0_ |= 0x00000001;
      width_ = value;
    }
    /**
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 width = 1 [default = 40];</code>
     */
    private void clearWidth() {
      bitField0_ = (bitField0_ & ~0x00000001);
      width_ = 40;
    }

    public static final int HEIGHT_FIELD_NUMBER = 2;
    private int height_;
    /**
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 height = 2 [default = 30];</code>
     * @return Whether the height field is set.
     */
    @Override
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 height = 2 [default = 30];</code>
     * @return The height.
     */
    @Override
    public int getHeight() {
      return height_;
    }
    /**
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 height = 2 [default = 30];</code>
     * @param value The height to set.
     */
    private void setHeight(int value) {
      bitField0_ |= 0x00000002;
      height_ = value;
    }
    /**
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 height = 2 [default = 30];</code>
     */
    private void clearHeight() {
      bitField0_ = (bitField0_ & ~0x00000002);
      height_ = 30;
    }

    public static final int FOOD_STATIC_FIELD_NUMBER = 3;
    private int foodStatic_;
    /**
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     *
     * <code>optional int32 food_static = 3 [default = 1];</code>
     * @return Whether the foodStatic field is set.
     */
    @Override
    public boolean hasFoodStatic() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     *
     * <code>optional int32 food_static = 3 [default = 1];</code>
     * @return The foodStatic.
     */
    @Override
    public int getFoodStatic() {
      return foodStatic_;
    }
    /**
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     *
     * <code>optional int32 food_static = 3 [default = 1];</code>
     * @param value The foodStatic to set.
     */
    private void setFoodStatic(int value) {
      bitField0_ |= 0x00000004;
      foodStatic_ = value;
    }
    /**
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     *
     * <code>optional int32 food_static = 3 [default = 1];</code>
     */
    private void clearFoodStatic() {
      bitField0_ = (bitField0_ & ~0x00000004);
      foodStatic_ = 1;
    }

    public static final int STATE_DELAY_MS_FIELD_NUMBER = 5;
    private int stateDelayMs_;
    /**
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
     * </pre>
     *
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     * @return Whether the stateDelayMs field is set.
     */
    @Override
    public boolean hasStateDelayMs() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
     * </pre>
     *
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     * @return The stateDelayMs.
     */
    @Override
    public int getStateDelayMs() {
      return stateDelayMs_;
    }
    /**
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
     * </pre>
     *
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     * @param value The stateDelayMs to set.
     */
    private void setStateDelayMs(int value) {
      bitField0_ |= 0x00000008;
      stateDelayMs_ = value;
    }
    /**
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
     * </pre>
     *
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     */
    private void clearStateDelayMs() {
      bitField0_ = (bitField0_ & ~0x00000008);
      stateDelayMs_ = 1000;
    }

    public static GameConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GameConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GameConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static GameConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GameConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GameConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(GameConfig prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Параметры идущей игры (не должны меняться в процессе игры) 
     * </pre>
     *
     * Protobuf type {@code snakes.GameConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          GameConfig, Builder> implements
        // @@protoc_insertion_point(builder_implements:snakes.GameConfig)
        GameConfigOrBuilder {
      // Construct using me.ippolitov.fit.snakes.SnakesProto.GameConfig.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Ширина поля в клетках (от 10 до 100)
       * </pre>
       *
       * <code>optional int32 width = 1 [default = 40];</code>
       * @return Whether the width field is set.
       */
      @Override
      public boolean hasWidth() {
        return instance.hasWidth();
      }
      /**
       * <pre>
       * Ширина поля в клетках (от 10 до 100)
       * </pre>
       *
       * <code>optional int32 width = 1 [default = 40];</code>
       * @return The width.
       */
      @Override
      public int getWidth() {
        return instance.getWidth();
      }
      /**
       * <pre>
       * Ширина поля в клетках (от 10 до 100)
       * </pre>
       *
       * <code>optional int32 width = 1 [default = 40];</code>
       * @param value The width to set.
       * @return This builder for chaining.
       */
      public Builder setWidth(int value) {
        copyOnWrite();
        instance.setWidth(value);
        return this;
      }
      /**
       * <pre>
       * Ширина поля в клетках (от 10 до 100)
       * </pre>
       *
       * <code>optional int32 width = 1 [default = 40];</code>
       * @return This builder for chaining.
       */
      public Builder clearWidth() {
        copyOnWrite();
        instance.clearWidth();
        return this;
      }

      /**
       * <pre>
       * Высота поля в клетках (от 10 до 100)
       * </pre>
       *
       * <code>optional int32 height = 2 [default = 30];</code>
       * @return Whether the height field is set.
       */
      @Override
      public boolean hasHeight() {
        return instance.hasHeight();
      }
      /**
       * <pre>
       * Высота поля в клетках (от 10 до 100)
       * </pre>
       *
       * <code>optional int32 height = 2 [default = 30];</code>
       * @return The height.
       */
      @Override
      public int getHeight() {
        return instance.getHeight();
      }
      /**
       * <pre>
       * Высота поля в клетках (от 10 до 100)
       * </pre>
       *
       * <code>optional int32 height = 2 [default = 30];</code>
       * @param value The height to set.
       * @return This builder for chaining.
       */
      public Builder setHeight(int value) {
        copyOnWrite();
        instance.setHeight(value);
        return this;
      }
      /**
       * <pre>
       * Высота поля в клетках (от 10 до 100)
       * </pre>
       *
       * <code>optional int32 height = 2 [default = 30];</code>
       * @return This builder for chaining.
       */
      public Builder clearHeight() {
        copyOnWrite();
        instance.clearHeight();
        return this;
      }

      /**
       * <pre>
       * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
       * </pre>
       *
       * <code>optional int32 food_static = 3 [default = 1];</code>
       * @return Whether the foodStatic field is set.
       */
      @Override
      public boolean hasFoodStatic() {
        return instance.hasFoodStatic();
      }
      /**
       * <pre>
       * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
       * </pre>
       *
       * <code>optional int32 food_static = 3 [default = 1];</code>
       * @return The foodStatic.
       */
      @Override
      public int getFoodStatic() {
        return instance.getFoodStatic();
      }
      /**
       * <pre>
       * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
       * </pre>
       *
       * <code>optional int32 food_static = 3 [default = 1];</code>
       * @param value The foodStatic to set.
       * @return This builder for chaining.
       */
      public Builder setFoodStatic(int value) {
        copyOnWrite();
        instance.setFoodStatic(value);
        return this;
      }
      /**
       * <pre>
       * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
       * </pre>
       *
       * <code>optional int32 food_static = 3 [default = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearFoodStatic() {
        copyOnWrite();
        instance.clearFoodStatic();
        return this;
      }

      /**
       * <pre>
       * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
       * </pre>
       *
       * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
       * @return Whether the stateDelayMs field is set.
       */
      @Override
      public boolean hasStateDelayMs() {
        return instance.hasStateDelayMs();
      }
      /**
       * <pre>
       * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
       * </pre>
       *
       * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
       * @return The stateDelayMs.
       */
      @Override
      public int getStateDelayMs() {
        return instance.getStateDelayMs();
      }
      /**
       * <pre>
       * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
       * </pre>
       *
       * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
       * @param value The stateDelayMs to set.
       * @return This builder for chaining.
       */
      public Builder setStateDelayMs(int value) {
        copyOnWrite();
        instance.setStateDelayMs(value);
        return this;
      }
      /**
       * <pre>
       * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
       * </pre>
       *
       * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
       * @return This builder for chaining.
       */
      public Builder clearStateDelayMs() {
        copyOnWrite();
        instance.clearStateDelayMs();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:snakes.GameConfig)
    }
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new GameConfig();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "bitField0_",
              "width_",
              "height_",
              "foodStatic_",
              "stateDelayMs_",
            };
            String info =
                "\u0001\u0004\u0000\u0001\u0001\u0005\u0004\u0000\u0000\u0000\u0001\u1004\u0000\u0002" +
                "\u1004\u0001\u0003\u1004\u0002\u0005\u1004\u0003";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<GameConfig> parser = PARSER;
          if (parser == null) {
            synchronized (GameConfig.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<GameConfig>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:snakes.GameConfig)
    private static final GameConfig DEFAULT_INSTANCE;
    static {
      GameConfig defaultInstance = new GameConfig();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        GameConfig.class, defaultInstance);
    }

    public static GameConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GameConfig> PARSER;

    public static com.google.protobuf.Parser<GameConfig> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GamePlayersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:snakes.GamePlayers)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    java.util.List<GamePlayer>
        getPlayersList();
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    GamePlayer getPlayers(int index);
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    int getPlayersCount();
  }
  /**
   * <pre>
   * гроки конкретной игры 
   * </pre>
   *
   * Protobuf type {@code snakes.GamePlayers}
   */
  public  static final class GamePlayers extends
      com.google.protobuf.GeneratedMessageLite<
          GamePlayers, GamePlayers.Builder> implements
      // @@protoc_insertion_point(message_implements:snakes.GamePlayers)
      GamePlayersOrBuilder {
    private GamePlayers() {
      players_ = emptyProtobufList();
    }
    public static final int PLAYERS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<GamePlayer> players_;
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    @Override
    public java.util.List<GamePlayer> getPlayersList() {
      return players_;
    }
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    public java.util.List<? extends GamePlayerOrBuilder>
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    @Override
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    @Override
    public GamePlayer getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    public GamePlayerOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }
    private void ensurePlayersIsMutable() {
      com.google.protobuf.Internal.ProtobufList<GamePlayer> tmp = players_;
      if (!tmp.isModifiable()) {
        players_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    private void setPlayers(
        int index, GamePlayer value) {
      value.getClass();
  ensurePlayersIsMutable();
      players_.set(index, value);
    }
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    private void addPlayers(GamePlayer value) {
      value.getClass();
  ensurePlayersIsMutable();
      players_.add(value);
    }
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    private void addPlayers(
        int index, GamePlayer value) {
      value.getClass();
  ensurePlayersIsMutable();
      players_.add(index, value);
    }
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    private void addAllPlayers(
        Iterable<? extends GamePlayer> values) {
      ensurePlayersIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, players_);
    }
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    private void clearPlayers() {
      players_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Список всех игроков
     * </pre>
     *
     * <code>repeated .snakes.GamePlayer players = 1;</code>
     */
    private void removePlayers(int index) {
      ensurePlayersIsMutable();
      players_.remove(index);
    }

    public static GamePlayers parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GamePlayers parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GamePlayers parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GamePlayers parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GamePlayers parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GamePlayers parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GamePlayers parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GamePlayers parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GamePlayers parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static GamePlayers parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GamePlayers parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GamePlayers parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(GamePlayers prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * гроки конкретной игры 
     * </pre>
     *
     * Protobuf type {@code snakes.GamePlayers}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          GamePlayers, Builder> implements
        // @@protoc_insertion_point(builder_implements:snakes.GamePlayers)
        GamePlayersOrBuilder {
      // Construct using me.ippolitov.fit.snakes.SnakesProto.GamePlayers.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      @Override
      public java.util.List<GamePlayer> getPlayersList() {
        return java.util.Collections.unmodifiableList(
            instance.getPlayersList());
      }
      /**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      @Override
      public int getPlayersCount() {
        return instance.getPlayersCount();
      }/**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      @Override
      public GamePlayer getPlayers(int index) {
        return instance.getPlayers(index);
      }
      /**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      public Builder setPlayers(
          int index, GamePlayer value) {
        copyOnWrite();
        instance.setPlayers(index, value);
        return this;
      }
      /**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      public Builder setPlayers(
          int index, GamePlayer.Builder builderForValue) {
        copyOnWrite();
        instance.setPlayers(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      public Builder addPlayers(GamePlayer value) {
        copyOnWrite();
        instance.addPlayers(value);
        return this;
      }
      /**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      public Builder addPlayers(
          int index, GamePlayer value) {
        copyOnWrite();
        instance.addPlayers(index, value);
        return this;
      }
      /**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      public Builder addPlayers(
          GamePlayer.Builder builderForValue) {
        copyOnWrite();
        instance.addPlayers(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      public Builder addPlayers(
          int index, GamePlayer.Builder builderForValue) {
        copyOnWrite();
        instance.addPlayers(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      public Builder addAllPlayers(
          Iterable<? extends GamePlayer> values) {
        copyOnWrite();
        instance.addAllPlayers(values);
        return this;
      }
      /**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      public Builder clearPlayers() {
        copyOnWrite();
        instance.clearPlayers();
        return this;
      }
      /**
       * <pre>
       * Список всех игроков
       * </pre>
       *
       * <code>repeated .snakes.GamePlayer players = 1;</code>
       */
      public Builder removePlayers(int index) {
        copyOnWrite();
        instance.removePlayers(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:snakes.GamePlayers)
    }
    private byte memoizedIsInitialized = 2;
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new GamePlayers();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "players_",
              GamePlayer.class,
            };
            String info =
                "\u0001\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<GamePlayers> parser = PARSER;
          if (parser == null) {
            synchronized (GamePlayers.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<GamePlayers>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:snakes.GamePlayers)
    private static final GamePlayers DEFAULT_INSTANCE;
    static {
      GamePlayers defaultInstance = new GamePlayers();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        GamePlayers.class, defaultInstance);
    }

    public static GamePlayers getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GamePlayers> PARSER;

    public static com.google.protobuf.Parser<GamePlayers> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GameStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:snakes.GameState)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     * @return Whether the stateOrder field is set.
     */
    boolean hasStateOrder();
    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     * @return The stateOrder.
     */
    int getStateOrder();

    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    java.util.List<GameState.Snake>
        getSnakesList();
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    GameState.Snake getSnakes(int index);
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    int getSnakesCount();

    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    java.util.List<GameState.Coord>
        getFoodsList();
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    GameState.Coord getFoods(int index);
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    int getFoodsCount();

    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     * @return Whether the players field is set.
     */
    boolean hasPlayers();
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     * @return The players.
     */
    GamePlayers getPlayers();
  }
  /**
   * <pre>
   * Текущее состояние игрового поля 
   * </pre>
   *
   * Protobuf type {@code snakes.GameState}
   */
  public  static final class GameState extends
      com.google.protobuf.GeneratedMessageLite<
          GameState, GameState.Builder> implements
      // @@protoc_insertion_point(message_implements:snakes.GameState)
      GameStateOrBuilder {
    private GameState() {
      snakes_ = emptyProtobufList();
      foods_ = emptyProtobufList();
    }
    public interface CoordOrBuilder extends
        // @@protoc_insertion_point(interface_extends:snakes.GameState.Coord)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       * @return Whether the x field is set.
       */
      boolean hasX();
      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       * @return The x.
       */
      int getX();

      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       * @return Whether the y field is set.
       */
      boolean hasY();
      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       * @return The y.
       */
      int getY();
    }
    /**
     * <pre>
     * Координаты в пределах игрового поля, либо относительное смещение координат.
     * Левая верхняя клетка поля имеет координаты (x=0, y=0).
     * Направление смещения задаётся знаком чисел. 
     * </pre>
     *
     * Protobuf type {@code snakes.GameState.Coord}
     */
    public  static final class Coord extends
        com.google.protobuf.GeneratedMessageLite<
            Coord, Coord.Builder> implements
        // @@protoc_insertion_point(message_implements:snakes.GameState.Coord)
        CoordOrBuilder {
      private Coord() {
      }
      private int bitField0_;
      public static final int X_FIELD_NUMBER = 1;
      private int x_;
      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       * @return Whether the x field is set.
       */
      @Override
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       * @return The x.
       */
      @Override
      public int getX() {
        return x_;
      }
      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       * @param value The x to set.
       */
      private void setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
      }
      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       */
      private void clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
      }

      public static final int Y_FIELD_NUMBER = 2;
      private int y_;
      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       * @return Whether the y field is set.
       */
      @Override
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       * @return The y.
       */
      @Override
      public int getY() {
        return y_;
      }
      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       * @param value The y to set.
       */
      private void setY(int value) {
        bitField0_ |= 0x00000002;
        y_ = value;
      }
      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       */
      private void clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
      }

      public static Coord parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static Coord parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static Coord parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static Coord parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static Coord parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static Coord parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static Coord parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static Coord parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static Coord parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static Coord parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static Coord parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static Coord parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(Coord prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Координаты в пределах игрового поля, либо относительное смещение координат.
       * Левая верхняя клетка поля имеет координаты (x=0, y=0).
       * Направление смещения задаётся знаком чисел. 
       * </pre>
       *
       * Protobuf type {@code snakes.GameState.Coord}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            Coord, Builder> implements
          // @@protoc_insertion_point(builder_implements:snakes.GameState.Coord)
          CoordOrBuilder {
        // Construct using me.ippolitov.fit.snakes.SnakesProto.GameState.Coord.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * По горизонтальной оси, положительное направление - вправо
         * </pre>
         *
         * <code>optional sint32 x = 1 [default = 0];</code>
         * @return Whether the x field is set.
         */
        @Override
        public boolean hasX() {
          return instance.hasX();
        }
        /**
         * <pre>
         * По горизонтальной оси, положительное направление - вправо
         * </pre>
         *
         * <code>optional sint32 x = 1 [default = 0];</code>
         * @return The x.
         */
        @Override
        public int getX() {
          return instance.getX();
        }
        /**
         * <pre>
         * По горизонтальной оси, положительное направление - вправо
         * </pre>
         *
         * <code>optional sint32 x = 1 [default = 0];</code>
         * @param value The x to set.
         * @return This builder for chaining.
         */
        public Builder setX(int value) {
          copyOnWrite();
          instance.setX(value);
          return this;
        }
        /**
         * <pre>
         * По горизонтальной оси, положительное направление - вправо
         * </pre>
         *
         * <code>optional sint32 x = 1 [default = 0];</code>
         * @return This builder for chaining.
         */
        public Builder clearX() {
          copyOnWrite();
          instance.clearX();
          return this;
        }

        /**
         * <pre>
         * По вертикальной оси, положительное направление - вниз
         * </pre>
         *
         * <code>optional sint32 y = 2 [default = 0];</code>
         * @return Whether the y field is set.
         */
        @Override
        public boolean hasY() {
          return instance.hasY();
        }
        /**
         * <pre>
         * По вертикальной оси, положительное направление - вниз
         * </pre>
         *
         * <code>optional sint32 y = 2 [default = 0];</code>
         * @return The y.
         */
        @Override
        public int getY() {
          return instance.getY();
        }
        /**
         * <pre>
         * По вертикальной оси, положительное направление - вниз
         * </pre>
         *
         * <code>optional sint32 y = 2 [default = 0];</code>
         * @param value The y to set.
         * @return This builder for chaining.
         */
        public Builder setY(int value) {
          copyOnWrite();
          instance.setY(value);
          return this;
        }
        /**
         * <pre>
         * По вертикальной оси, положительное направление - вниз
         * </pre>
         *
         * <code>optional sint32 y = 2 [default = 0];</code>
         * @return This builder for chaining.
         */
        public Builder clearY() {
          copyOnWrite();
          instance.clearY();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:snakes.GameState.Coord)
      }
      @Override
      @SuppressWarnings({"unchecked", "fallthrough"})
      protected final Object dynamicMethod(
          MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new Coord();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              Object[] objects = new Object[] {
                "bitField0_",
                "x_",
                "y_",
              };
              String info =
                  "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u100f\u0000\u0002" +
                  "\u100f\u0001";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<Coord> parser = PARSER;
            if (parser == null) {
              synchronized (Coord.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<Coord>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:snakes.GameState.Coord)
      private static final Coord DEFAULT_INSTANCE;
      static {
        Coord defaultInstance = new Coord();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Coord.class, defaultInstance);
      }

      public static Coord getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Coord> PARSER;

      public static com.google.protobuf.Parser<Coord> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface SnakeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:snakes.GameState.Snake)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * дентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       * @return Whether the playerId field is set.
       */
      boolean hasPlayerId();
      /**
       * <pre>
       * дентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       * @return The playerId.
       */
      int getPlayerId();

      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      java.util.List<Coord>
          getPointsList();
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      Coord getPoints(int index);
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      int getPointsCount();

      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       * @return Whether the state field is set.
       */
      boolean hasState();
      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       * @return The state.
       */
      Snake.SnakeState getState();

      /**
       * <pre>
       * Направление, в котором "повёрнута" голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       * @return Whether the headDirection field is set.
       */
      boolean hasHeadDirection();
      /**
       * <pre>
       * Направление, в котором "повёрнута" голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       * @return The headDirection.
       */
      Direction getHeadDirection();
    }
    /**
     * <pre>
     * Змея
     * </pre>
     *
     * Protobuf type {@code snakes.GameState.Snake}
     */
    public  static final class Snake extends
        com.google.protobuf.GeneratedMessageLite<
            Snake, Snake.Builder> implements
        // @@protoc_insertion_point(message_implements:snakes.GameState.Snake)
        SnakeOrBuilder {
      private Snake() {
        points_ = emptyProtobufList();
        headDirection_ = 1;
      }
      /**
       * <pre>
       * Статус змеи в игре
       * </pre>
       *
       * Protobuf enum {@code snakes.GameState.Snake.SnakeState}
       */
      public enum SnakeState
          implements com.google.protobuf.Internal.EnumLite {
        /**
         * <pre>
         * Змея управляется игроком
         * </pre>
         *
         * <code>ALIVE = 0;</code>
         */
        ALIVE(0),
        /**
         * <pre>
         * Змея принадлежала игроку, который вышел из игры, она продолжает движение куда глаза глядят
         * </pre>
         *
         * <code>ZOMBIE = 1;</code>
         */
        ZOMBIE(1),
        ;

        /**
         * <pre>
         * Змея управляется игроком
         * </pre>
         *
         * <code>ALIVE = 0;</code>
         */
        public static final int ALIVE_VALUE = 0;
        /**
         * <pre>
         * Змея принадлежала игроку, который вышел из игры, она продолжает движение куда глаза глядят
         * </pre>
         *
         * <code>ZOMBIE = 1;</code>
         */
        public static final int ZOMBIE_VALUE = 1;


        @Override
        public final int getNumber() {
          return value;
        }

        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static SnakeState valueOf(int value) {
          return forNumber(value);
        }

        public static SnakeState forNumber(int value) {
          switch (value) {
            case 0: return ALIVE;
            case 1: return ZOMBIE;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<SnakeState>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            SnakeState> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<SnakeState>() {
                @Override
                public SnakeState findValueByNumber(int number) {
                  return SnakeState.forNumber(number);
                }
              };

        public static com.google.protobuf.Internal.EnumVerifier 
            internalGetVerifier() {
          return SnakeStateVerifier.INSTANCE;
        }

        private static final class SnakeStateVerifier implements 
             com.google.protobuf.Internal.EnumVerifier { 
                static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new SnakeStateVerifier();
                @Override
                public boolean isInRange(int number) {
                  return SnakeState.forNumber(number) != null;
                }
              };

        private final int value;

        private SnakeState(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:snakes.GameState.Snake.SnakeState)
      }

      private int bitField0_;
      public static final int PLAYER_ID_FIELD_NUMBER = 1;
      private int playerId_;
      /**
       * <pre>
       * дентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       * @return Whether the playerId field is set.
       */
      @Override
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * дентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       * @return The playerId.
       */
      @Override
      public int getPlayerId() {
        return playerId_;
      }
      /**
       * <pre>
       * дентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       * @param value The playerId to set.
       */
      private void setPlayerId(int value) {
        bitField0_ |= 0x00000001;
        playerId_ = value;
      }
      /**
       * <pre>
       * дентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       */
      private void clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0;
      }

      public static final int POINTS_FIELD_NUMBER = 2;
      private com.google.protobuf.Internal.ProtobufList<Coord> points_;
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      @Override
      public java.util.List<Coord> getPointsList() {
        return points_;
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public java.util.List<? extends CoordOrBuilder>
          getPointsOrBuilderList() {
        return points_;
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      @Override
      public int getPointsCount() {
        return points_.size();
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      @Override
      public Coord getPoints(int index) {
        return points_.get(index);
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public CoordOrBuilder getPointsOrBuilder(
          int index) {
        return points_.get(index);
      }
      private void ensurePointsIsMutable() {
        com.google.protobuf.Internal.ProtobufList<Coord> tmp = points_;
        if (!tmp.isModifiable()) {
          points_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
         }
      }

      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      private void setPoints(
          int index, Coord value) {
        value.getClass();
  ensurePointsIsMutable();
        points_.set(index, value);
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      private void addPoints(Coord value) {
        value.getClass();
  ensurePointsIsMutable();
        points_.add(value);
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      private void addPoints(
          int index, Coord value) {
        value.getClass();
  ensurePointsIsMutable();
        points_.add(index, value);
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      private void addAllPoints(
          Iterable<? extends Coord> values) {
        ensurePointsIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, points_);
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      private void clearPoints() {
        points_ = emptyProtobufList();
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      private void removePoints(int index) {
        ensurePointsIsMutable();
        points_.remove(index);
      }

      public static final int STATE_FIELD_NUMBER = 3;
      private int state_;
      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       * @return Whether the state field is set.
       */
      @Override
      public boolean hasState() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       * @return The state.
       */
      @Override
      public SnakeState getState() {
        SnakeState result = SnakeState.forNumber(state_);
        return result == null ? SnakeState.ALIVE : result;
      }
      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       * @param value The state to set.
       */
      private void setState(SnakeState value) {
        state_ = value.getNumber();
        bitField0_ |= 0x00000002;
      }
      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       */
      private void clearState() {
        bitField0_ = (bitField0_ & ~0x00000002);
        state_ = 0;
      }

      public static final int HEAD_DIRECTION_FIELD_NUMBER = 4;
      private int headDirection_;
      /**
       * <pre>
       * Направление, в котором "повёрнута" голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       * @return Whether the headDirection field is set.
       */
      @Override
      public boolean hasHeadDirection() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Направление, в котором "повёрнута" голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       * @return The headDirection.
       */
      @Override
      public Direction getHeadDirection() {
        Direction result = Direction.forNumber(headDirection_);
        return result == null ? Direction.UP : result;
      }
      /**
       * <pre>
       * Направление, в котором "повёрнута" голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       * @param value The headDirection to set.
       */
      private void setHeadDirection(Direction value) {
        headDirection_ = value.getNumber();
        bitField0_ |= 0x00000004;
      }
      /**
       * <pre>
       * Направление, в котором "повёрнута" голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       */
      private void clearHeadDirection() {
        bitField0_ = (bitField0_ & ~0x00000004);
        headDirection_ = 1;
      }

      public static Snake parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static Snake parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static Snake parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static Snake parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static Snake parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static Snake parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static Snake parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static Snake parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static Snake parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static Snake parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static Snake parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static Snake parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(Snake prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Змея
       * </pre>
       *
       * Protobuf type {@code snakes.GameState.Snake}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            Snake, Builder> implements
          // @@protoc_insertion_point(builder_implements:snakes.GameState.Snake)
          SnakeOrBuilder {
        // Construct using me.ippolitov.fit.snakes.SnakesProto.GameState.Snake.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * дентификатор игрока-владельца змеи, см. GamePlayer.id
         * </pre>
         *
         * <code>required int32 player_id = 1;</code>
         * @return Whether the playerId field is set.
         */
        @Override
        public boolean hasPlayerId() {
          return instance.hasPlayerId();
        }
        /**
         * <pre>
         * дентификатор игрока-владельца змеи, см. GamePlayer.id
         * </pre>
         *
         * <code>required int32 player_id = 1;</code>
         * @return The playerId.
         */
        @Override
        public int getPlayerId() {
          return instance.getPlayerId();
        }
        /**
         * <pre>
         * дентификатор игрока-владельца змеи, см. GamePlayer.id
         * </pre>
         *
         * <code>required int32 player_id = 1;</code>
         * @param value The playerId to set.
         * @return This builder for chaining.
         */
        public Builder setPlayerId(int value) {
          copyOnWrite();
          instance.setPlayerId(value);
          return this;
        }
        /**
         * <pre>
         * дентификатор игрока-владельца змеи, см. GamePlayer.id
         * </pre>
         *
         * <code>required int32 player_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPlayerId() {
          copyOnWrite();
          instance.clearPlayerId();
          return this;
        }

        /**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        @Override
        public java.util.List<Coord> getPointsList() {
          return java.util.Collections.unmodifiableList(
              instance.getPointsList());
        }
        /**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        @Override
        public int getPointsCount() {
          return instance.getPointsCount();
        }/**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        @Override
        public Coord getPoints(int index) {
          return instance.getPoints(index);
        }
        /**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        public Builder setPoints(
            int index, Coord value) {
          copyOnWrite();
          instance.setPoints(index, value);
          return this;
        }
        /**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        public Builder setPoints(
            int index, Coord.Builder builderForValue) {
          copyOnWrite();
          instance.setPoints(index,
              builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        public Builder addPoints(Coord value) {
          copyOnWrite();
          instance.addPoints(value);
          return this;
        }
        /**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        public Builder addPoints(
            int index, Coord value) {
          copyOnWrite();
          instance.addPoints(index, value);
          return this;
        }
        /**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        public Builder addPoints(
            Coord.Builder builderForValue) {
          copyOnWrite();
          instance.addPoints(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        public Builder addPoints(
            int index, Coord.Builder builderForValue) {
          copyOnWrite();
          instance.addPoints(index,
              builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        public Builder addAllPoints(
            Iterable<? extends Coord> values) {
          copyOnWrite();
          instance.addAllPoints(values);
          return this;
        }
        /**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        public Builder clearPoints() {
          copyOnWrite();
          instance.clearPoints();
          return this;
        }
        /**
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
         * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
         * </pre>
         *
         * <code>repeated .snakes.GameState.Coord points = 2;</code>
         */
        public Builder removePoints(int index) {
          copyOnWrite();
          instance.removePoints(index);
          return this;
        }

        /**
         * <pre>
         * статус змеи в игре
         * </pre>
         *
         * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
         * @return Whether the state field is set.
         */
        @Override
        public boolean hasState() {
          return instance.hasState();
        }
        /**
         * <pre>
         * статус змеи в игре
         * </pre>
         *
         * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
         * @return The state.
         */
        @Override
        public SnakeState getState() {
          return instance.getState();
        }
        /**
         * <pre>
         * статус змеи в игре
         * </pre>
         *
         * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
         * @param value The enum numeric value on the wire for state to set.
         * @return This builder for chaining.
         */
        public Builder setState(SnakeState value) {
          copyOnWrite();
          instance.setState(value);
          return this;
        }
        /**
         * <pre>
         * статус змеи в игре
         * </pre>
         *
         * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
         * @return This builder for chaining.
         */
        public Builder clearState() {
          copyOnWrite();
          instance.clearState();
          return this;
        }

        /**
         * <pre>
         * Направление, в котором "повёрнута" голова змейки в текущий момент
         * </pre>
         *
         * <code>required .snakes.Direction head_direction = 4;</code>
         * @return Whether the headDirection field is set.
         */
        @Override
        public boolean hasHeadDirection() {
          return instance.hasHeadDirection();
        }
        /**
         * <pre>
         * Направление, в котором "повёрнута" голова змейки в текущий момент
         * </pre>
         *
         * <code>required .snakes.Direction head_direction = 4;</code>
         * @return The headDirection.
         */
        @Override
        public Direction getHeadDirection() {
          return instance.getHeadDirection();
        }
        /**
         * <pre>
         * Направление, в котором "повёрнута" голова змейки в текущий момент
         * </pre>
         *
         * <code>required .snakes.Direction head_direction = 4;</code>
         * @param value The enum numeric value on the wire for headDirection to set.
         * @return This builder for chaining.
         */
        public Builder setHeadDirection(Direction value) {
          copyOnWrite();
          instance.setHeadDirection(value);
          return this;
        }
        /**
         * <pre>
         * Направление, в котором "повёрнута" голова змейки в текущий момент
         * </pre>
         *
         * <code>required .snakes.Direction head_direction = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearHeadDirection() {
          copyOnWrite();
          instance.clearHeadDirection();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:snakes.GameState.Snake)
      }
      private byte memoizedIsInitialized = 2;
      @Override
      @SuppressWarnings({"unchecked", "fallthrough"})
      protected final Object dynamicMethod(
          MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new Snake();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              Object[] objects = new Object[] {
                "bitField0_",
                "playerId_",
                "points_",
                Coord.class,
                "state_",
                SnakeState.internalGetVerifier(),
                "headDirection_",
                Direction.internalGetVerifier(),
              };
              String info =
                  "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0001\u0003\u0001\u1504\u0000\u0002" +
                  "\u001b\u0003\u150c\u0001\u0004\u150c\u0002";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<Snake> parser = PARSER;
            if (parser == null) {
              synchronized (Snake.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<Snake>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return memoizedIsInitialized;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:snakes.GameState.Snake)
      private static final Snake DEFAULT_INSTANCE;
      static {
        Snake defaultInstance = new Snake();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Snake.class, defaultInstance);
      }

      public static Snake getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Snake> PARSER;

      public static com.google.protobuf.Parser<Snake> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int STATE_ORDER_FIELD_NUMBER = 1;
    private int stateOrder_;
    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     * @return Whether the stateOrder field is set.
     */
    @Override
    public boolean hasStateOrder() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     * @return The stateOrder.
     */
    @Override
    public int getStateOrder() {
      return stateOrder_;
    }
    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     * @param value The stateOrder to set.
     */
    private void setStateOrder(int value) {
      bitField0_ |= 0x00000001;
      stateOrder_ = value;
    }
    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     */
    private void clearStateOrder() {
      bitField0_ = (bitField0_ & ~0x00000001);
      stateOrder_ = 0;
    }

    public static final int SNAKES_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<Snake> snakes_;
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    @Override
    public java.util.List<Snake> getSnakesList() {
      return snakes_;
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public java.util.List<? extends SnakeOrBuilder>
        getSnakesOrBuilderList() {
      return snakes_;
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    @Override
    public int getSnakesCount() {
      return snakes_.size();
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    @Override
    public Snake getSnakes(int index) {
      return snakes_.get(index);
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public SnakeOrBuilder getSnakesOrBuilder(
        int index) {
      return snakes_.get(index);
    }
    private void ensureSnakesIsMutable() {
      com.google.protobuf.Internal.ProtobufList<Snake> tmp = snakes_;
      if (!tmp.isModifiable()) {
        snakes_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    private void setSnakes(
        int index, Snake value) {
      value.getClass();
  ensureSnakesIsMutable();
      snakes_.set(index, value);
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    private void addSnakes(Snake value) {
      value.getClass();
  ensureSnakesIsMutable();
      snakes_.add(value);
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    private void addSnakes(
        int index, Snake value) {
      value.getClass();
  ensureSnakesIsMutable();
      snakes_.add(index, value);
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    private void addAllSnakes(
        Iterable<? extends Snake> values) {
      ensureSnakesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, snakes_);
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    private void clearSnakes() {
      snakes_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    private void removeSnakes(int index) {
      ensureSnakesIsMutable();
      snakes_.remove(index);
    }

    public static final int FOODS_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<Coord> foods_;
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    @Override
    public java.util.List<Coord> getFoodsList() {
      return foods_;
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public java.util.List<? extends CoordOrBuilder>
        getFoodsOrBuilderList() {
      return foods_;
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    @Override
    public int getFoodsCount() {
      return foods_.size();
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    @Override
    public Coord getFoods(int index) {
      return foods_.get(index);
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public CoordOrBuilder getFoodsOrBuilder(
        int index) {
      return foods_.get(index);
    }
    private void ensureFoodsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<Coord> tmp = foods_;
      if (!tmp.isModifiable()) {
        foods_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    private void setFoods(
        int index, Coord value) {
      value.getClass();
  ensureFoodsIsMutable();
      foods_.set(index, value);
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    private void addFoods(Coord value) {
      value.getClass();
  ensureFoodsIsMutable();
      foods_.add(value);
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    private void addFoods(
        int index, Coord value) {
      value.getClass();
  ensureFoodsIsMutable();
      foods_.add(index, value);
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    private void addAllFoods(
        Iterable<? extends Coord> values) {
      ensureFoodsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, foods_);
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    private void clearFoods() {
      foods_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    private void removeFoods(int index) {
      ensureFoodsIsMutable();
      foods_.remove(index);
    }

    public static final int PLAYERS_FIELD_NUMBER = 4;
    private GamePlayers players_;
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    @Override
    public boolean hasPlayers() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    @Override
    public GamePlayers getPlayers() {
      return players_ == null ? GamePlayers.getDefaultInstance() : players_;
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    private void setPlayers(GamePlayers value) {
      value.getClass();
  players_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    @SuppressWarnings({"ReferenceEquality"})
    private void mergePlayers(GamePlayers value) {
      value.getClass();
  if (players_ != null &&
          players_ != GamePlayers.getDefaultInstance()) {
        players_ =
          GamePlayers.newBuilder(players_).mergeFrom(value).buildPartial();
      } else {
        players_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    private void clearPlayers() {  players_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static GameState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GameState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GameState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static GameState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GameState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GameState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(GameState prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Текущее состояние игрового поля 
     * </pre>
     *
     * Protobuf type {@code snakes.GameState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          GameState, Builder> implements
        // @@protoc_insertion_point(builder_implements:snakes.GameState)
        GameStateOrBuilder {
      // Construct using me.ippolitov.fit.snakes.SnakesProto.GameState.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
       * </pre>
       *
       * <code>required int32 state_order = 1;</code>
       * @return Whether the stateOrder field is set.
       */
      @Override
      public boolean hasStateOrder() {
        return instance.hasStateOrder();
      }
      /**
       * <pre>
       * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
       * </pre>
       *
       * <code>required int32 state_order = 1;</code>
       * @return The stateOrder.
       */
      @Override
      public int getStateOrder() {
        return instance.getStateOrder();
      }
      /**
       * <pre>
       * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
       * </pre>
       *
       * <code>required int32 state_order = 1;</code>
       * @param value The stateOrder to set.
       * @return This builder for chaining.
       */
      public Builder setStateOrder(int value) {
        copyOnWrite();
        instance.setStateOrder(value);
        return this;
      }
      /**
       * <pre>
       * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
       * </pre>
       *
       * <code>required int32 state_order = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStateOrder() {
        copyOnWrite();
        instance.clearStateOrder();
        return this;
      }

      /**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      @Override
      public java.util.List<Snake> getSnakesList() {
        return java.util.Collections.unmodifiableList(
            instance.getSnakesList());
      }
      /**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      @Override
      public int getSnakesCount() {
        return instance.getSnakesCount();
      }/**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      @Override
      public Snake getSnakes(int index) {
        return instance.getSnakes(index);
      }
      /**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      public Builder setSnakes(
          int index, Snake value) {
        copyOnWrite();
        instance.setSnakes(index, value);
        return this;
      }
      /**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      public Builder setSnakes(
          int index, Snake.Builder builderForValue) {
        copyOnWrite();
        instance.setSnakes(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      public Builder addSnakes(Snake value) {
        copyOnWrite();
        instance.addSnakes(value);
        return this;
      }
      /**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      public Builder addSnakes(
          int index, Snake value) {
        copyOnWrite();
        instance.addSnakes(index, value);
        return this;
      }
      /**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      public Builder addSnakes(
          Snake.Builder builderForValue) {
        copyOnWrite();
        instance.addSnakes(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      public Builder addSnakes(
          int index, Snake.Builder builderForValue) {
        copyOnWrite();
        instance.addSnakes(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      public Builder addAllSnakes(
          Iterable<? extends Snake> values) {
        copyOnWrite();
        instance.addAllSnakes(values);
        return this;
      }
      /**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      public Builder clearSnakes() {
        copyOnWrite();
        instance.clearSnakes();
        return this;
      }
      /**
       * <pre>
       * Список змей
       * </pre>
       *
       * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
       */
      public Builder removeSnakes(int index) {
        copyOnWrite();
        instance.removeSnakes(index);
        return this;
      }

      /**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      @Override
      public java.util.List<Coord> getFoodsList() {
        return java.util.Collections.unmodifiableList(
            instance.getFoodsList());
      }
      /**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      @Override
      public int getFoodsCount() {
        return instance.getFoodsCount();
      }/**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      @Override
      public Coord getFoods(int index) {
        return instance.getFoods(index);
      }
      /**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      public Builder setFoods(
          int index, Coord value) {
        copyOnWrite();
        instance.setFoods(index, value);
        return this;
      }
      /**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      public Builder setFoods(
          int index, Coord.Builder builderForValue) {
        copyOnWrite();
        instance.setFoods(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      public Builder addFoods(Coord value) {
        copyOnWrite();
        instance.addFoods(value);
        return this;
      }
      /**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      public Builder addFoods(
          int index, Coord value) {
        copyOnWrite();
        instance.addFoods(index, value);
        return this;
      }
      /**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      public Builder addFoods(
          Coord.Builder builderForValue) {
        copyOnWrite();
        instance.addFoods(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      public Builder addFoods(
          int index, Coord.Builder builderForValue) {
        copyOnWrite();
        instance.addFoods(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      public Builder addAllFoods(
          Iterable<? extends Coord> values) {
        copyOnWrite();
        instance.addAllFoods(values);
        return this;
      }
      /**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      public Builder clearFoods() {
        copyOnWrite();
        instance.clearFoods();
        return this;
      }
      /**
       * <pre>
       * Список клеток с едой
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord foods = 3;</code>
       */
      public Builder removeFoods(int index) {
        copyOnWrite();
        instance.removeFoods(index);
        return this;
      }

      /**
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 4;</code>
       */
      @Override
      public boolean hasPlayers() {
        return instance.hasPlayers();
      }
      /**
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 4;</code>
       */
      @Override
      public GamePlayers getPlayers() {
        return instance.getPlayers();
      }
      /**
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 4;</code>
       */
      public Builder setPlayers(GamePlayers value) {
        copyOnWrite();
        instance.setPlayers(value);
        return this;
        }
      /**
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 4;</code>
       */
      public Builder setPlayers(
          GamePlayers.Builder builderForValue) {
        copyOnWrite();
        instance.setPlayers(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 4;</code>
       */
      public Builder mergePlayers(GamePlayers value) {
        copyOnWrite();
        instance.mergePlayers(value);
        return this;
      }
      /**
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 4;</code>
       */
      public Builder clearPlayers() {  copyOnWrite();
        instance.clearPlayers();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:snakes.GameState)
    }
    private byte memoizedIsInitialized = 2;
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new GameState();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "bitField0_",
              "stateOrder_",
              "snakes_",
              Snake.class,
              "foods_",
              Coord.class,
              "players_",
            };
            String info =
                "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0002\u0003\u0001\u1504\u0000\u0002" +
                "\u041b\u0003\u001b\u0004\u1509\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<GameState> parser = PARSER;
          if (parser == null) {
            synchronized (GameState.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<GameState>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:snakes.GameState)
    private static final GameState DEFAULT_INSTANCE;
    static {
      GameState defaultInstance = new GameState();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        GameState.class, defaultInstance);
    }

    public static GameState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GameState> PARSER;

    public static com.google.protobuf.Parser<GameState> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GameAnnouncementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:snakes.GameAnnouncement)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Текущие игроки
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 1;</code>
     * @return Whether the players field is set.
     */
    boolean hasPlayers();
    /**
     * <pre>
     * Текущие игроки
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 1;</code>
     * @return The players.
     */
    GamePlayers getPlayers();

    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 2;</code>
     * @return Whether the config field is set.
     */
    boolean hasConfig();
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 2;</code>
     * @return The config.
     */
    GameConfig getConfig();

    /**
     * <pre>
     * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
     * </pre>
     *
     * <code>optional bool can_join = 3 [default = true];</code>
     * @return Whether the canJoin field is set.
     */
    boolean hasCanJoin();
    /**
     * <pre>
     * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
     * </pre>
     *
     * <code>optional bool can_join = 3 [default = true];</code>
     * @return The canJoin.
     */
    boolean getCanJoin();

    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     * @return Whether the gameName field is set.
     */
    boolean hasGameName();
    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     * @return The gameName.
     */
    String getGameName();
    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     * @return The bytes for gameName.
     */
    com.google.protobuf.ByteString
        getGameNameBytes();
  }
  /**
   * Protobuf type {@code snakes.GameAnnouncement}
   */
  public  static final class GameAnnouncement extends
      com.google.protobuf.GeneratedMessageLite<
          GameAnnouncement, GameAnnouncement.Builder> implements
      // @@protoc_insertion_point(message_implements:snakes.GameAnnouncement)
      GameAnnouncementOrBuilder {
    private GameAnnouncement() {
      canJoin_ = true;
      gameName_ = "";
    }
    private int bitField0_;
    public static final int PLAYERS_FIELD_NUMBER = 1;
    private GamePlayers players_;
    /**
     * <pre>
     * Текущие игроки
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 1;</code>
     */
    @Override
    public boolean hasPlayers() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Текущие игроки
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 1;</code>
     */
    @Override
    public GamePlayers getPlayers() {
      return players_ == null ? GamePlayers.getDefaultInstance() : players_;
    }
    /**
     * <pre>
     * Текущие игроки
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 1;</code>
     */
    private void setPlayers(GamePlayers value) {
      value.getClass();
  players_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * Текущие игроки
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 1;</code>
     */
    @SuppressWarnings({"ReferenceEquality"})
    private void mergePlayers(GamePlayers value) {
      value.getClass();
  if (players_ != null &&
          players_ != GamePlayers.getDefaultInstance()) {
        players_ =
          GamePlayers.newBuilder(players_).mergeFrom(value).buildPartial();
      } else {
        players_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Текущие игроки
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 1;</code>
     */
    private void clearPlayers() {  players_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int CONFIG_FIELD_NUMBER = 2;
    private GameConfig config_;
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 2;</code>
     */
    @Override
    public boolean hasConfig() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 2;</code>
     */
    @Override
    public GameConfig getConfig() {
      return config_ == null ? GameConfig.getDefaultInstance() : config_;
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 2;</code>
     */
    private void setConfig(GameConfig value) {
      value.getClass();
  config_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 2;</code>
     */
    @SuppressWarnings({"ReferenceEquality"})
    private void mergeConfig(GameConfig value) {
      value.getClass();
  if (config_ != null &&
          config_ != GameConfig.getDefaultInstance()) {
        config_ =
          GameConfig.newBuilder(config_).mergeFrom(value).buildPartial();
      } else {
        config_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 2;</code>
     */
    private void clearConfig() {  config_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int CAN_JOIN_FIELD_NUMBER = 3;
    private boolean canJoin_;
    /**
     * <pre>
     * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
     * </pre>
     *
     * <code>optional bool can_join = 3 [default = true];</code>
     * @return Whether the canJoin field is set.
     */
    @Override
    public boolean hasCanJoin() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
     * </pre>
     *
     * <code>optional bool can_join = 3 [default = true];</code>
     * @return The canJoin.
     */
    @Override
    public boolean getCanJoin() {
      return canJoin_;
    }
    /**
     * <pre>
     * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
     * </pre>
     *
     * <code>optional bool can_join = 3 [default = true];</code>
     * @param value The canJoin to set.
     */
    private void setCanJoin(boolean value) {
      bitField0_ |= 0x00000004;
      canJoin_ = value;
    }
    /**
     * <pre>
     * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
     * </pre>
     *
     * <code>optional bool can_join = 3 [default = true];</code>
     */
    private void clearCanJoin() {
      bitField0_ = (bitField0_ & ~0x00000004);
      canJoin_ = true;
    }

    public static final int GAME_NAME_FIELD_NUMBER = 4;
    private String gameName_;
    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     * @return Whether the gameName field is set.
     */
    @Override
    public boolean hasGameName() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     * @return The gameName.
     */
    @Override
    public String getGameName() {
      return gameName_;
    }
    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     * @return The bytes for gameName.
     */
    @Override
    public com.google.protobuf.ByteString
        getGameNameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(gameName_);
    }
    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     * @param value The gameName to set.
     */
    private void setGameName(
        String value) {
      value.getClass();
  bitField0_ |= 0x00000008;
      gameName_ = value;
    }
    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     */
    private void clearGameName() {
      bitField0_ = (bitField0_ & ~0x00000008);
      gameName_ = getDefaultInstance().getGameName();
    }
    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     * @param value The bytes for gameName to set.
     */
    private void setGameNameBytes(
        com.google.protobuf.ByteString value) {
      gameName_ = value.toStringUtf8();
      bitField0_ |= 0x00000008;
    }

    public static GameAnnouncement parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameAnnouncement parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameAnnouncement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameAnnouncement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameAnnouncement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameAnnouncement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameAnnouncement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GameAnnouncement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GameAnnouncement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static GameAnnouncement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GameAnnouncement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GameAnnouncement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(GameAnnouncement prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code snakes.GameAnnouncement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          GameAnnouncement, Builder> implements
        // @@protoc_insertion_point(builder_implements:snakes.GameAnnouncement)
        GameAnnouncementOrBuilder {
      // Construct using me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Текущие игроки
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 1;</code>
       */
      @Override
      public boolean hasPlayers() {
        return instance.hasPlayers();
      }
      /**
       * <pre>
       * Текущие игроки
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 1;</code>
       */
      @Override
      public GamePlayers getPlayers() {
        return instance.getPlayers();
      }
      /**
       * <pre>
       * Текущие игроки
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 1;</code>
       */
      public Builder setPlayers(GamePlayers value) {
        copyOnWrite();
        instance.setPlayers(value);
        return this;
        }
      /**
       * <pre>
       * Текущие игроки
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 1;</code>
       */
      public Builder setPlayers(
          GamePlayers.Builder builderForValue) {
        copyOnWrite();
        instance.setPlayers(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Текущие игроки
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 1;</code>
       */
      public Builder mergePlayers(GamePlayers value) {
        copyOnWrite();
        instance.mergePlayers(value);
        return this;
      }
      /**
       * <pre>
       * Текущие игроки
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 1;</code>
       */
      public Builder clearPlayers() {  copyOnWrite();
        instance.clearPlayers();
        return this;
      }

      /**
       * <pre>
       * Параметры игры
       * </pre>
       *
       * <code>required .snakes.GameConfig config = 2;</code>
       */
      @Override
      public boolean hasConfig() {
        return instance.hasConfig();
      }
      /**
       * <pre>
       * Параметры игры
       * </pre>
       *
       * <code>required .snakes.GameConfig config = 2;</code>
       */
      @Override
      public GameConfig getConfig() {
        return instance.getConfig();
      }
      /**
       * <pre>
       * Параметры игры
       * </pre>
       *
       * <code>required .snakes.GameConfig config = 2;</code>
       */
      public Builder setConfig(GameConfig value) {
        copyOnWrite();
        instance.setConfig(value);
        return this;
        }
      /**
       * <pre>
       * Параметры игры
       * </pre>
       *
       * <code>required .snakes.GameConfig config = 2;</code>
       */
      public Builder setConfig(
          GameConfig.Builder builderForValue) {
        copyOnWrite();
        instance.setConfig(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Параметры игры
       * </pre>
       *
       * <code>required .snakes.GameConfig config = 2;</code>
       */
      public Builder mergeConfig(GameConfig value) {
        copyOnWrite();
        instance.mergeConfig(value);
        return this;
      }
      /**
       * <pre>
       * Параметры игры
       * </pre>
       *
       * <code>required .snakes.GameConfig config = 2;</code>
       */
      public Builder clearConfig() {  copyOnWrite();
        instance.clearConfig();
        return this;
      }

      /**
       * <pre>
       * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
       * </pre>
       *
       * <code>optional bool can_join = 3 [default = true];</code>
       * @return Whether the canJoin field is set.
       */
      @Override
      public boolean hasCanJoin() {
        return instance.hasCanJoin();
      }
      /**
       * <pre>
       * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
       * </pre>
       *
       * <code>optional bool can_join = 3 [default = true];</code>
       * @return The canJoin.
       */
      @Override
      public boolean getCanJoin() {
        return instance.getCanJoin();
      }
      /**
       * <pre>
       * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
       * </pre>
       *
       * <code>optional bool can_join = 3 [default = true];</code>
       * @param value The canJoin to set.
       * @return This builder for chaining.
       */
      public Builder setCanJoin(boolean value) {
        copyOnWrite();
        instance.setCanJoin(value);
        return this;
      }
      /**
       * <pre>
       * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
       * </pre>
       *
       * <code>optional bool can_join = 3 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearCanJoin() {
        copyOnWrite();
        instance.clearCanJoin();
        return this;
      }

      /**
       * <pre>
       * Глобально уникальное имя игры, например "my game"
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @return Whether the gameName field is set.
       */
      @Override
      public boolean hasGameName() {
        return instance.hasGameName();
      }
      /**
       * <pre>
       * Глобально уникальное имя игры, например "my game"
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @return The gameName.
       */
      @Override
      public String getGameName() {
        return instance.getGameName();
      }
      /**
       * <pre>
       * Глобально уникальное имя игры, например "my game"
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @return The bytes for gameName.
       */
      @Override
      public com.google.protobuf.ByteString
          getGameNameBytes() {
        return instance.getGameNameBytes();
      }
      /**
       * <pre>
       * Глобально уникальное имя игры, например "my game"
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @param value The gameName to set.
       * @return This builder for chaining.
       */
      public Builder setGameName(
          String value) {
        copyOnWrite();
        instance.setGameName(value);
        return this;
      }
      /**
       * <pre>
       * Глобально уникальное имя игры, например "my game"
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearGameName() {
        copyOnWrite();
        instance.clearGameName();
        return this;
      }
      /**
       * <pre>
       * Глобально уникальное имя игры, например "my game"
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @param value The bytes for gameName to set.
       * @return This builder for chaining.
       */
      public Builder setGameNameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setGameNameBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:snakes.GameAnnouncement)
    }
    private byte memoizedIsInitialized = 2;
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new GameAnnouncement();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "bitField0_",
              "players_",
              "config_",
              "canJoin_",
              "gameName_",
            };
            String info =
                "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0003\u0001\u1509\u0000\u0002" +
                "\u1509\u0001\u0003\u1007\u0002\u0004\u1508\u0003";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<GameAnnouncement> parser = PARSER;
          if (parser == null) {
            synchronized (GameAnnouncement.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<GameAnnouncement>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:snakes.GameAnnouncement)
    private static final GameAnnouncement DEFAULT_INSTANCE;
    static {
      GameAnnouncement defaultInstance = new GameAnnouncement();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        GameAnnouncement.class, defaultInstance);
    }

    public static GameAnnouncement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GameAnnouncement> PARSER;

    public static com.google.protobuf.Parser<GameAnnouncement> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GameMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:snakes.GameMessage)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     * @return Whether the msgSeq field is set.
     */
    boolean hasMsgSeq();
    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     * @return The msgSeq.
     */
    long getMsgSeq();

    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     * @return Whether the senderId field is set.
     */
    boolean hasSenderId();
    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     * @return The senderId.
     */
    int getSenderId();

    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     * @return Whether the receiverId field is set.
     */
    boolean hasReceiverId();
    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     * @return The receiverId.
     */
    int getReceiverId();

    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     * @return Whether the ping field is set.
     */
    boolean hasPing();
    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     * @return The ping.
     */
    GameMessage.PingMsg getPing();

    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     * @return Whether the steer field is set.
     */
    boolean hasSteer();
    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     * @return The steer.
     */
    GameMessage.SteerMsg getSteer();

    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     * @return Whether the ack field is set.
     */
    boolean hasAck();
    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     * @return The ack.
     */
    GameMessage.AckMsg getAck();

    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     * @return Whether the state field is set.
     */
    boolean hasState();
    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     * @return The state.
     */
    GameMessage.StateMsg getState();

    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     * @return Whether the announcement field is set.
     */
    boolean hasAnnouncement();
    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     * @return The announcement.
     */
    GameMessage.AnnouncementMsg getAnnouncement();

    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     * @return Whether the join field is set.
     */
    boolean hasJoin();
    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     * @return The join.
     */
    GameMessage.JoinMsg getJoin();

    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     * @return Whether the error field is set.
     */
    boolean hasError();
    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     * @return The error.
     */
    GameMessage.ErrorMsg getError();

    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     * @return Whether the roleChange field is set.
     */
    boolean hasRoleChange();
    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     * @return The roleChange.
     */
    GameMessage.RoleChangeMsg getRoleChange();

    /**
     * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
     * @return Whether the discover field is set.
     */
    boolean hasDiscover();
    /**
     * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
     * @return The discover.
     */
    GameMessage.DiscoverMsg getDiscover();

    public GameMessage.TypeCase getTypeCase();
  }
  /**
   * <pre>
   * Общий формат любого UDP-сообщения
   * </pre>
   *
   * Protobuf type {@code snakes.GameMessage}
   */
  public  static final class GameMessage extends
      com.google.protobuf.GeneratedMessageLite<
          GameMessage, GameMessage.Builder> implements
      // @@protoc_insertion_point(message_implements:snakes.GameMessage)
      GameMessageOrBuilder {
    private GameMessage() {
    }
    public interface PingMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:snakes.GameMessage.PingMsg)
        com.google.protobuf.MessageLiteOrBuilder {
    }
    /**
     * <pre>
     * Ничего не меняем, просто говорим, что мы живы
     * </pre>
     *
     * Protobuf type {@code snakes.GameMessage.PingMsg}
     */
    public  static final class PingMsg extends
        com.google.protobuf.GeneratedMessageLite<
            PingMsg, PingMsg.Builder> implements
        // @@protoc_insertion_point(message_implements:snakes.GameMessage.PingMsg)
        PingMsgOrBuilder {
      private PingMsg() {
      }
      public static PingMsg parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static PingMsg parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static PingMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static PingMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static PingMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static PingMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static PingMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static PingMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static PingMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static PingMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static PingMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static PingMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(PingMsg prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Ничего не меняем, просто говорим, что мы живы
       * </pre>
       *
       * Protobuf type {@code snakes.GameMessage.PingMsg}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            PingMsg, Builder> implements
          // @@protoc_insertion_point(builder_implements:snakes.GameMessage.PingMsg)
          PingMsgOrBuilder {
        // Construct using me.ippolitov.fit.snakes.SnakesProto.GameMessage.PingMsg.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        // @@protoc_insertion_point(builder_scope:snakes.GameMessage.PingMsg)
      }
      @Override
      @SuppressWarnings({"unchecked", "fallthrough"})
      protected final Object dynamicMethod(
          MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new PingMsg();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              Object[] objects = null;
              String info =
                  "\u0001\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<PingMsg> parser = PARSER;
            if (parser == null) {
              synchronized (PingMsg.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<PingMsg>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:snakes.GameMessage.PingMsg)
      private static final PingMsg DEFAULT_INSTANCE;
      static {
        PingMsg defaultInstance = new PingMsg();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          PingMsg.class, defaultInstance);
      }

      public static PingMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<PingMsg> PARSER;

      public static com.google.protobuf.Parser<PingMsg> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface SteerMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:snakes.GameMessage.SteerMsg)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       * @return Whether the direction field is set.
       */
      boolean hasDirection();
      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       * @return The direction.
       */
      Direction getDirection();
    }
    /**
     * <pre>
     * Не-центральный игрок просит повернуть голову змеи
     * </pre>
     *
     * Protobuf type {@code snakes.GameMessage.SteerMsg}
     */
    public  static final class SteerMsg extends
        com.google.protobuf.GeneratedMessageLite<
            SteerMsg, SteerMsg.Builder> implements
        // @@protoc_insertion_point(message_implements:snakes.GameMessage.SteerMsg)
        SteerMsgOrBuilder {
      private SteerMsg() {
        direction_ = 1;
      }
      private int bitField0_;
      public static final int DIRECTION_FIELD_NUMBER = 1;
      private int direction_;
      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       * @return Whether the direction field is set.
       */
      @Override
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       * @return The direction.
       */
      @Override
      public Direction getDirection() {
        Direction result = Direction.forNumber(direction_);
        return result == null ? Direction.UP : result;
      }
      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       * @param value The direction to set.
       */
      private void setDirection(Direction value) {
        direction_ = value.getNumber();
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       */
      private void clearDirection() {
        bitField0_ = (bitField0_ & ~0x00000001);
        direction_ = 1;
      }

      public static SteerMsg parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static SteerMsg parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static SteerMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static SteerMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static SteerMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static SteerMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static SteerMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static SteerMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static SteerMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static SteerMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static SteerMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static SteerMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(SteerMsg prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Не-центральный игрок просит повернуть голову змеи
       * </pre>
       *
       * Protobuf type {@code snakes.GameMessage.SteerMsg}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            SteerMsg, Builder> implements
          // @@protoc_insertion_point(builder_implements:snakes.GameMessage.SteerMsg)
          SteerMsgOrBuilder {
        // Construct using me.ippolitov.fit.snakes.SnakesProto.GameMessage.SteerMsg.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Куда повернуть на следующем шаге
         * </pre>
         *
         * <code>required .snakes.Direction direction = 1;</code>
         * @return Whether the direction field is set.
         */
        @Override
        public boolean hasDirection() {
          return instance.hasDirection();
        }
        /**
         * <pre>
         * Куда повернуть на следующем шаге
         * </pre>
         *
         * <code>required .snakes.Direction direction = 1;</code>
         * @return The direction.
         */
        @Override
        public Direction getDirection() {
          return instance.getDirection();
        }
        /**
         * <pre>
         * Куда повернуть на следующем шаге
         * </pre>
         *
         * <code>required .snakes.Direction direction = 1;</code>
         * @param value The enum numeric value on the wire for direction to set.
         * @return This builder for chaining.
         */
        public Builder setDirection(Direction value) {
          copyOnWrite();
          instance.setDirection(value);
          return this;
        }
        /**
         * <pre>
         * Куда повернуть на следующем шаге
         * </pre>
         *
         * <code>required .snakes.Direction direction = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearDirection() {
          copyOnWrite();
          instance.clearDirection();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:snakes.GameMessage.SteerMsg)
      }
      private byte memoizedIsInitialized = 2;
      @Override
      @SuppressWarnings({"unchecked", "fallthrough"})
      protected final Object dynamicMethod(
          MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new SteerMsg();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              Object[] objects = new Object[] {
                "bitField0_",
                "direction_",
                Direction.internalGetVerifier(),
              };
              String info =
                  "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0001\u0001\u150c\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<SteerMsg> parser = PARSER;
            if (parser == null) {
              synchronized (SteerMsg.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<SteerMsg>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return memoizedIsInitialized;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:snakes.GameMessage.SteerMsg)
      private static final SteerMsg DEFAULT_INSTANCE;
      static {
        SteerMsg defaultInstance = new SteerMsg();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          SteerMsg.class, defaultInstance);
      }

      public static SteerMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<SteerMsg> PARSER;

      public static com.google.protobuf.Parser<SteerMsg> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface AckMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:snakes.GameMessage.AckMsg)
        com.google.protobuf.MessageLiteOrBuilder {
    }
    /**
     * <pre>
     * Подтверждение сообщения с таким же seq
     * </pre>
     *
     * Protobuf type {@code snakes.GameMessage.AckMsg}
     */
    public  static final class AckMsg extends
        com.google.protobuf.GeneratedMessageLite<
            AckMsg, AckMsg.Builder> implements
        // @@protoc_insertion_point(message_implements:snakes.GameMessage.AckMsg)
        AckMsgOrBuilder {
      private AckMsg() {
      }
      public static AckMsg parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static AckMsg parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static AckMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static AckMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static AckMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static AckMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static AckMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static AckMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static AckMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static AckMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static AckMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static AckMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(AckMsg prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Подтверждение сообщения с таким же seq
       * </pre>
       *
       * Protobuf type {@code snakes.GameMessage.AckMsg}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            AckMsg, Builder> implements
          // @@protoc_insertion_point(builder_implements:snakes.GameMessage.AckMsg)
          AckMsgOrBuilder {
        // Construct using me.ippolitov.fit.snakes.SnakesProto.GameMessage.AckMsg.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        // @@protoc_insertion_point(builder_scope:snakes.GameMessage.AckMsg)
      }
      @Override
      @SuppressWarnings({"unchecked", "fallthrough"})
      protected final Object dynamicMethod(
          MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new AckMsg();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              Object[] objects = null;
              String info =
                  "\u0001\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<AckMsg> parser = PARSER;
            if (parser == null) {
              synchronized (AckMsg.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<AckMsg>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:snakes.GameMessage.AckMsg)
      private static final AckMsg DEFAULT_INSTANCE;
      static {
        AckMsg defaultInstance = new AckMsg();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          AckMsg.class, defaultInstance);
      }

      public static AckMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<AckMsg> PARSER;

      public static com.google.protobuf.Parser<AckMsg> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface StateMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:snakes.GameMessage.StateMsg)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       * @return Whether the state field is set.
       */
      boolean hasState();
      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       * @return The state.
       */
      GameState getState();
    }
    /**
     * <pre>
     * Центральный узел сообщает остальным игрокам состояние игры
     * </pre>
     *
     * Protobuf type {@code snakes.GameMessage.StateMsg}
     */
    public  static final class StateMsg extends
        com.google.protobuf.GeneratedMessageLite<
            StateMsg, StateMsg.Builder> implements
        // @@protoc_insertion_point(message_implements:snakes.GameMessage.StateMsg)
        StateMsgOrBuilder {
      private StateMsg() {
      }
      private int bitField0_;
      public static final int STATE_FIELD_NUMBER = 1;
      private GameState state_;
      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       */
      @Override
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       */
      @Override
      public GameState getState() {
        return state_ == null ? GameState.getDefaultInstance() : state_;
      }
      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       */
      private void setState(GameState value) {
        value.getClass();
  state_ = value;
        bitField0_ |= 0x00000001;
        }
      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       */
      @SuppressWarnings({"ReferenceEquality"})
      private void mergeState(GameState value) {
        value.getClass();
  if (state_ != null &&
            state_ != GameState.getDefaultInstance()) {
          state_ =
            GameState.newBuilder(state_).mergeFrom(value).buildPartial();
        } else {
          state_ = value;
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       */
      private void clearState() {  state_ = null;
        bitField0_ = (bitField0_ & ~0x00000001);
      }

      public static StateMsg parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static StateMsg parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static StateMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static StateMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static StateMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static StateMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static StateMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static StateMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static StateMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static StateMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static StateMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static StateMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(StateMsg prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Центральный узел сообщает остальным игрокам состояние игры
       * </pre>
       *
       * Protobuf type {@code snakes.GameMessage.StateMsg}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            StateMsg, Builder> implements
          // @@protoc_insertion_point(builder_implements:snakes.GameMessage.StateMsg)
          StateMsgOrBuilder {
        // Construct using me.ippolitov.fit.snakes.SnakesProto.GameMessage.StateMsg.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Состояние игрового поля
         * </pre>
         *
         * <code>required .snakes.GameState state = 1;</code>
         */
        @Override
        public boolean hasState() {
          return instance.hasState();
        }
        /**
         * <pre>
         * Состояние игрового поля
         * </pre>
         *
         * <code>required .snakes.GameState state = 1;</code>
         */
        @Override
        public GameState getState() {
          return instance.getState();
        }
        /**
         * <pre>
         * Состояние игрового поля
         * </pre>
         *
         * <code>required .snakes.GameState state = 1;</code>
         */
        public Builder setState(GameState value) {
          copyOnWrite();
          instance.setState(value);
          return this;
          }
        /**
         * <pre>
         * Состояние игрового поля
         * </pre>
         *
         * <code>required .snakes.GameState state = 1;</code>
         */
        public Builder setState(
            GameState.Builder builderForValue) {
          copyOnWrite();
          instance.setState(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Состояние игрового поля
         * </pre>
         *
         * <code>required .snakes.GameState state = 1;</code>
         */
        public Builder mergeState(GameState value) {
          copyOnWrite();
          instance.mergeState(value);
          return this;
        }
        /**
         * <pre>
         * Состояние игрового поля
         * </pre>
         *
         * <code>required .snakes.GameState state = 1;</code>
         */
        public Builder clearState() {  copyOnWrite();
          instance.clearState();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:snakes.GameMessage.StateMsg)
      }
      private byte memoizedIsInitialized = 2;
      @Override
      @SuppressWarnings({"unchecked", "fallthrough"})
      protected final Object dynamicMethod(
          MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new StateMsg();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              Object[] objects = new Object[] {
                "bitField0_",
                "state_",
              };
              String info =
                  "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0001\u0001\u1509\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<StateMsg> parser = PARSER;
            if (parser == null) {
              synchronized (StateMsg.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<StateMsg>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return memoizedIsInitialized;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:snakes.GameMessage.StateMsg)
      private static final StateMsg DEFAULT_INSTANCE;
      static {
        StateMsg defaultInstance = new StateMsg();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          StateMsg.class, defaultInstance);
      }

      public static StateMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<StateMsg> PARSER;

      public static com.google.protobuf.Parser<StateMsg> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface AnnouncementMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:snakes.GameMessage.AnnouncementMsg)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      java.util.List<GameAnnouncement>
          getGamesList();
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      GameAnnouncement getGames(int index);
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      int getGamesCount();
    }
    /**
     * <pre>
     * Уведомление об идущих играх, регулярно отправляется multicast-ом или в ответ на DiscoverMsg
     * </pre>
     *
     * Protobuf type {@code snakes.GameMessage.AnnouncementMsg}
     */
    public  static final class AnnouncementMsg extends
        com.google.protobuf.GeneratedMessageLite<
            AnnouncementMsg, AnnouncementMsg.Builder> implements
        // @@protoc_insertion_point(message_implements:snakes.GameMessage.AnnouncementMsg)
        AnnouncementMsgOrBuilder {
      private AnnouncementMsg() {
        games_ = emptyProtobufList();
      }
      public static final int GAMES_FIELD_NUMBER = 1;
      private com.google.protobuf.Internal.ProtobufList<GameAnnouncement> games_;
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      @Override
      public java.util.List<GameAnnouncement> getGamesList() {
        return games_;
      }
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      public java.util.List<? extends GameAnnouncementOrBuilder>
          getGamesOrBuilderList() {
        return games_;
      }
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      @Override
      public int getGamesCount() {
        return games_.size();
      }
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      @Override
      public GameAnnouncement getGames(int index) {
        return games_.get(index);
      }
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      public GameAnnouncementOrBuilder getGamesOrBuilder(
          int index) {
        return games_.get(index);
      }
      private void ensureGamesIsMutable() {
        com.google.protobuf.Internal.ProtobufList<GameAnnouncement> tmp = games_;
        if (!tmp.isModifiable()) {
          games_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
         }
      }

      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      private void setGames(
          int index, GameAnnouncement value) {
        value.getClass();
  ensureGamesIsMutable();
        games_.set(index, value);
      }
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      private void addGames(GameAnnouncement value) {
        value.getClass();
  ensureGamesIsMutable();
        games_.add(value);
      }
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      private void addGames(
          int index, GameAnnouncement value) {
        value.getClass();
  ensureGamesIsMutable();
        games_.add(index, value);
      }
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      private void addAllGames(
          Iterable<? extends GameAnnouncement> values) {
        ensureGamesIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, games_);
      }
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      private void clearGames() {
        games_ = emptyProtobufList();
      }
      /**
       * <pre>
       * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      private void removeGames(int index) {
        ensureGamesIsMutable();
        games_.remove(index);
      }

      public static AnnouncementMsg parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static AnnouncementMsg parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static AnnouncementMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static AnnouncementMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static AnnouncementMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static AnnouncementMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static AnnouncementMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static AnnouncementMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static AnnouncementMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static AnnouncementMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static AnnouncementMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static AnnouncementMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(AnnouncementMsg prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Уведомление об идущих играх, регулярно отправляется multicast-ом или в ответ на DiscoverMsg
       * </pre>
       *
       * Protobuf type {@code snakes.GameMessage.AnnouncementMsg}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            AnnouncementMsg, Builder> implements
          // @@protoc_insertion_point(builder_implements:snakes.GameMessage.AnnouncementMsg)
          AnnouncementMsgOrBuilder {
        // Construct using me.ippolitov.fit.snakes.SnakesProto.GameMessage.AnnouncementMsg.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        @Override
        public java.util.List<GameAnnouncement> getGamesList() {
          return java.util.Collections.unmodifiableList(
              instance.getGamesList());
        }
        /**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        @Override
        public int getGamesCount() {
          return instance.getGamesCount();
        }/**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        @Override
        public GameAnnouncement getGames(int index) {
          return instance.getGames(index);
        }
        /**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        public Builder setGames(
            int index, GameAnnouncement value) {
          copyOnWrite();
          instance.setGames(index, value);
          return this;
        }
        /**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        public Builder setGames(
            int index, GameAnnouncement.Builder builderForValue) {
          copyOnWrite();
          instance.setGames(index,
              builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        public Builder addGames(GameAnnouncement value) {
          copyOnWrite();
          instance.addGames(value);
          return this;
        }
        /**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        public Builder addGames(
            int index, GameAnnouncement value) {
          copyOnWrite();
          instance.addGames(index, value);
          return this;
        }
        /**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        public Builder addGames(
            GameAnnouncement.Builder builderForValue) {
          copyOnWrite();
          instance.addGames(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        public Builder addGames(
            int index, GameAnnouncement.Builder builderForValue) {
          copyOnWrite();
          instance.addGames(index,
              builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        public Builder addAllGames(
            Iterable<? extends GameAnnouncement> values) {
          copyOnWrite();
          instance.addAllGames(values);
          return this;
        }
        /**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        public Builder clearGames() {
          copyOnWrite();
          instance.clearGames();
          return this;
        }
        /**
         * <pre>
         * дущие игры (в текущей версии задачи тут всегда ровно одна игра)
         * </pre>
         *
         * <code>repeated .snakes.GameAnnouncement games = 1;</code>
         */
        public Builder removeGames(int index) {
          copyOnWrite();
          instance.removeGames(index);
          return this;
        }

        // @@protoc_insertion_point(builder_scope:snakes.GameMessage.AnnouncementMsg)
      }
      private byte memoizedIsInitialized = 2;
      @Override
      @SuppressWarnings({"unchecked", "fallthrough"})
      protected final Object dynamicMethod(
          MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new AnnouncementMsg();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              Object[] objects = new Object[] {
                "games_",
                GameAnnouncement.class,
              };
              String info =
                  "\u0001\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u041b";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<AnnouncementMsg> parser = PARSER;
            if (parser == null) {
              synchronized (AnnouncementMsg.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<AnnouncementMsg>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return memoizedIsInitialized;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:snakes.GameMessage.AnnouncementMsg)
      private static final AnnouncementMsg DEFAULT_INSTANCE;
      static {
        AnnouncementMsg defaultInstance = new AnnouncementMsg();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          AnnouncementMsg.class, defaultInstance);
      }

      public static AnnouncementMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<AnnouncementMsg> PARSER;

      public static com.google.protobuf.Parser<AnnouncementMsg> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface DiscoverMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:snakes.GameMessage.DiscoverMsg)
        com.google.protobuf.MessageLiteOrBuilder {
    }
    /**
     * <pre>
     * Запрос информации об идущих играх
     * </pre>
     *
     * Protobuf type {@code snakes.GameMessage.DiscoverMsg}
     */
    public  static final class DiscoverMsg extends
        com.google.protobuf.GeneratedMessageLite<
            DiscoverMsg, DiscoverMsg.Builder> implements
        // @@protoc_insertion_point(message_implements:snakes.GameMessage.DiscoverMsg)
        DiscoverMsgOrBuilder {
      private DiscoverMsg() {
      }
      public static DiscoverMsg parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static DiscoverMsg parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static DiscoverMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static DiscoverMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static DiscoverMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static DiscoverMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static DiscoverMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static DiscoverMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static DiscoverMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static DiscoverMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static DiscoverMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static DiscoverMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(DiscoverMsg prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Запрос информации об идущих играх
       * </pre>
       *
       * Protobuf type {@code snakes.GameMessage.DiscoverMsg}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            DiscoverMsg, Builder> implements
          // @@protoc_insertion_point(builder_implements:snakes.GameMessage.DiscoverMsg)
          DiscoverMsgOrBuilder {
        // Construct using me.ippolitov.fit.snakes.SnakesProto.GameMessage.DiscoverMsg.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        // @@protoc_insertion_point(builder_scope:snakes.GameMessage.DiscoverMsg)
      }
      @Override
      @SuppressWarnings({"unchecked", "fallthrough"})
      protected final Object dynamicMethod(
          MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new DiscoverMsg();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              Object[] objects = null;
              String info =
                  "\u0001\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<DiscoverMsg> parser = PARSER;
            if (parser == null) {
              synchronized (DiscoverMsg.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<DiscoverMsg>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:snakes.GameMessage.DiscoverMsg)
      private static final DiscoverMsg DEFAULT_INSTANCE;
      static {
        DiscoverMsg defaultInstance = new DiscoverMsg();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          DiscoverMsg.class, defaultInstance);
      }

      public static DiscoverMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<DiscoverMsg> PARSER;

      public static com.google.protobuf.Parser<DiscoverMsg> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface JoinMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:snakes.GameMessage.JoinMsg)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       * @return Whether the playerType field is set.
       */
      boolean hasPlayerType();
      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       * @return The playerType.
       */
      PlayerType getPlayerType();

      /**
       * <pre>
       * мя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       * @return Whether the playerName field is set.
       */
      boolean hasPlayerName();
      /**
       * <pre>
       * мя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       * @return The playerName.
       */
      String getPlayerName();
      /**
       * <pre>
       * мя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       * @return The bytes for playerName.
       */
      com.google.protobuf.ByteString
          getPlayerNameBytes();

      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @return Whether the gameName field is set.
       */
      boolean hasGameName();
      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @return The gameName.
       */
      String getGameName();
      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @return The bytes for gameName.
       */
      com.google.protobuf.ByteString
          getGameNameBytes();

      /**
       * <pre>
       * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
       * </pre>
       *
       * <code>required .snakes.NodeRole requested_role = 5;</code>
       * @return Whether the requestedRole field is set.
       */
      boolean hasRequestedRole();
      /**
       * <pre>
       * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
       * </pre>
       *
       * <code>required .snakes.NodeRole requested_role = 5;</code>
       * @return The requestedRole.
       */
      NodeRole getRequestedRole();
    }
    /**
     * <pre>
     * Новый игрок хочет присоединиться к идущей игре
     * </pre>
     *
     * Protobuf type {@code snakes.GameMessage.JoinMsg}
     */
    public  static final class JoinMsg extends
        com.google.protobuf.GeneratedMessageLite<
            JoinMsg, JoinMsg.Builder> implements
        // @@protoc_insertion_point(message_implements:snakes.GameMessage.JoinMsg)
        JoinMsgOrBuilder {
      private JoinMsg() {
        playerName_ = "";
        gameName_ = "";
      }
      private int bitField0_;
      public static final int PLAYER_TYPE_FIELD_NUMBER = 1;
      private int playerType_;
      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       * @return Whether the playerType field is set.
       */
      @Override
      public boolean hasPlayerType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       * @return The playerType.
       */
      @Override
      public PlayerType getPlayerType() {
        PlayerType result = PlayerType.forNumber(playerType_);
        return result == null ? PlayerType.HUMAN : result;
      }
      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       * @param value The playerType to set.
       */
      private void setPlayerType(PlayerType value) {
        playerType_ = value.getNumber();
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       */
      private void clearPlayerType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        playerType_ = 0;
      }

      public static final int PLAYER_NAME_FIELD_NUMBER = 3;
      private String playerName_;
      /**
       * <pre>
       * мя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       * @return Whether the playerName field is set.
       */
      @Override
      public boolean hasPlayerName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * мя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       * @return The playerName.
       */
      @Override
      public String getPlayerName() {
        return playerName_;
      }
      /**
       * <pre>
       * мя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       * @return The bytes for playerName.
       */
      @Override
      public com.google.protobuf.ByteString
          getPlayerNameBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(playerName_);
      }
      /**
       * <pre>
       * мя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       * @param value The playerName to set.
       */
      private void setPlayerName(
          String value) {
        value.getClass();
  bitField0_ |= 0x00000002;
        playerName_ = value;
      }
      /**
       * <pre>
       * мя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       */
      private void clearPlayerName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        playerName_ = getDefaultInstance().getPlayerName();
      }
      /**
       * <pre>
       * мя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       * @param value The bytes for playerName to set.
       */
      private void setPlayerNameBytes(
          com.google.protobuf.ByteString value) {
        playerName_ = value.toStringUtf8();
        bitField0_ |= 0x00000002;
      }

      public static final int GAME_NAME_FIELD_NUMBER = 4;
      private String gameName_;
      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @return Whether the gameName field is set.
       */
      @Override
      public boolean hasGameName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @return The gameName.
       */
      @Override
      public String getGameName() {
        return gameName_;
      }
      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @return The bytes for gameName.
       */
      @Override
      public com.google.protobuf.ByteString
          getGameNameBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(gameName_);
      }
      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @param value The gameName to set.
       */
      private void setGameName(
          String value) {
        value.getClass();
  bitField0_ |= 0x00000004;
        gameName_ = value;
      }
      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       */
      private void clearGameName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameName_ = getDefaultInstance().getGameName();
      }
      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @param value The bytes for gameName to set.
       */
      private void setGameNameBytes(
          com.google.protobuf.ByteString value) {
        gameName_ = value.toStringUtf8();
        bitField0_ |= 0x00000004;
      }

      public static final int REQUESTED_ROLE_FIELD_NUMBER = 5;
      private int requestedRole_;
      /**
       * <pre>
       * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
       * </pre>
       *
       * <code>required .snakes.NodeRole requested_role = 5;</code>
       * @return Whether the requestedRole field is set.
       */
      @Override
      public boolean hasRequestedRole() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
       * </pre>
       *
       * <code>required .snakes.NodeRole requested_role = 5;</code>
       * @return The requestedRole.
       */
      @Override
      public NodeRole getRequestedRole() {
        NodeRole result = NodeRole.forNumber(requestedRole_);
        return result == null ? NodeRole.NORMAL : result;
      }
      /**
       * <pre>
       * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
       * </pre>
       *
       * <code>required .snakes.NodeRole requested_role = 5;</code>
       * @param value The requestedRole to set.
       */
      private void setRequestedRole(NodeRole value) {
        requestedRole_ = value.getNumber();
        bitField0_ |= 0x00000008;
      }
      /**
       * <pre>
       * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
       * </pre>
       *
       * <code>required .snakes.NodeRole requested_role = 5;</code>
       */
      private void clearRequestedRole() {
        bitField0_ = (bitField0_ & ~0x00000008);
        requestedRole_ = 0;
      }

      public static JoinMsg parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static JoinMsg parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static JoinMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static JoinMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static JoinMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static JoinMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static JoinMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static JoinMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static JoinMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static JoinMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static JoinMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static JoinMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(JoinMsg prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Новый игрок хочет присоединиться к идущей игре
       * </pre>
       *
       * Protobuf type {@code snakes.GameMessage.JoinMsg}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            JoinMsg, Builder> implements
          // @@protoc_insertion_point(builder_implements:snakes.GameMessage.JoinMsg)
          JoinMsgOrBuilder {
        // Construct using me.ippolitov.fit.snakes.SnakesProto.GameMessage.JoinMsg.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Тип присоединяющегося игрока
         * </pre>
         *
         * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
         * @return Whether the playerType field is set.
         */
        @Override
        public boolean hasPlayerType() {
          return instance.hasPlayerType();
        }
        /**
         * <pre>
         * Тип присоединяющегося игрока
         * </pre>
         *
         * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
         * @return The playerType.
         */
        @Override
        public PlayerType getPlayerType() {
          return instance.getPlayerType();
        }
        /**
         * <pre>
         * Тип присоединяющегося игрока
         * </pre>
         *
         * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
         * @param value The enum numeric value on the wire for playerType to set.
         * @return This builder for chaining.
         */
        public Builder setPlayerType(PlayerType value) {
          copyOnWrite();
          instance.setPlayerType(value);
          return this;
        }
        /**
         * <pre>
         * Тип присоединяющегося игрока
         * </pre>
         *
         * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
         * @return This builder for chaining.
         */
        public Builder clearPlayerType() {
          copyOnWrite();
          instance.clearPlayerType();
          return this;
        }

        /**
         * <pre>
         * мя игрока
         * </pre>
         *
         * <code>required string player_name = 3;</code>
         * @return Whether the playerName field is set.
         */
        @Override
        public boolean hasPlayerName() {
          return instance.hasPlayerName();
        }
        /**
         * <pre>
         * мя игрока
         * </pre>
         *
         * <code>required string player_name = 3;</code>
         * @return The playerName.
         */
        @Override
        public String getPlayerName() {
          return instance.getPlayerName();
        }
        /**
         * <pre>
         * мя игрока
         * </pre>
         *
         * <code>required string player_name = 3;</code>
         * @return The bytes for playerName.
         */
        @Override
        public com.google.protobuf.ByteString
            getPlayerNameBytes() {
          return instance.getPlayerNameBytes();
        }
        /**
         * <pre>
         * мя игрока
         * </pre>
         *
         * <code>required string player_name = 3;</code>
         * @param value The playerName to set.
         * @return This builder for chaining.
         */
        public Builder setPlayerName(
            String value) {
          copyOnWrite();
          instance.setPlayerName(value);
          return this;
        }
        /**
         * <pre>
         * мя игрока
         * </pre>
         *
         * <code>required string player_name = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearPlayerName() {
          copyOnWrite();
          instance.clearPlayerName();
          return this;
        }
        /**
         * <pre>
         * мя игрока
         * </pre>
         *
         * <code>required string player_name = 3;</code>
         * @param value The bytes for playerName to set.
         * @return This builder for chaining.
         */
        public Builder setPlayerNameBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setPlayerNameBytes(value);
          return this;
        }

        /**
         * <pre>
         * Глобально уникальное имя игры, к которой хотим присоединиться
         * </pre>
         *
         * <code>required string game_name = 4;</code>
         * @return Whether the gameName field is set.
         */
        @Override
        public boolean hasGameName() {
          return instance.hasGameName();
        }
        /**
         * <pre>
         * Глобально уникальное имя игры, к которой хотим присоединиться
         * </pre>
         *
         * <code>required string game_name = 4;</code>
         * @return The gameName.
         */
        @Override
        public String getGameName() {
          return instance.getGameName();
        }
        /**
         * <pre>
         * Глобально уникальное имя игры, к которой хотим присоединиться
         * </pre>
         *
         * <code>required string game_name = 4;</code>
         * @return The bytes for gameName.
         */
        @Override
        public com.google.protobuf.ByteString
            getGameNameBytes() {
          return instance.getGameNameBytes();
        }
        /**
         * <pre>
         * Глобально уникальное имя игры, к которой хотим присоединиться
         * </pre>
         *
         * <code>required string game_name = 4;</code>
         * @param value The gameName to set.
         * @return This builder for chaining.
         */
        public Builder setGameName(
            String value) {
          copyOnWrite();
          instance.setGameName(value);
          return this;
        }
        /**
         * <pre>
         * Глобально уникальное имя игры, к которой хотим присоединиться
         * </pre>
         *
         * <code>required string game_name = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearGameName() {
          copyOnWrite();
          instance.clearGameName();
          return this;
        }
        /**
         * <pre>
         * Глобально уникальное имя игры, к которой хотим присоединиться
         * </pre>
         *
         * <code>required string game_name = 4;</code>
         * @param value The bytes for gameName to set.
         * @return This builder for chaining.
         */
        public Builder setGameNameBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setGameNameBytes(value);
          return this;
        }

        /**
         * <pre>
         * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
         * </pre>
         *
         * <code>required .snakes.NodeRole requested_role = 5;</code>
         * @return Whether the requestedRole field is set.
         */
        @Override
        public boolean hasRequestedRole() {
          return instance.hasRequestedRole();
        }
        /**
         * <pre>
         * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
         * </pre>
         *
         * <code>required .snakes.NodeRole requested_role = 5;</code>
         * @return The requestedRole.
         */
        @Override
        public NodeRole getRequestedRole() {
          return instance.getRequestedRole();
        }
        /**
         * <pre>
         * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
         * </pre>
         *
         * <code>required .snakes.NodeRole requested_role = 5;</code>
         * @param value The enum numeric value on the wire for requestedRole to set.
         * @return This builder for chaining.
         */
        public Builder setRequestedRole(NodeRole value) {
          copyOnWrite();
          instance.setRequestedRole(value);
          return this;
        }
        /**
         * <pre>
         * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
         * </pre>
         *
         * <code>required .snakes.NodeRole requested_role = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearRequestedRole() {
          copyOnWrite();
          instance.clearRequestedRole();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:snakes.GameMessage.JoinMsg)
      }
      private byte memoizedIsInitialized = 2;
      @Override
      @SuppressWarnings({"unchecked", "fallthrough"})
      protected final Object dynamicMethod(
          MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new JoinMsg();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              Object[] objects = new Object[] {
                "bitField0_",
                "playerType_",
                PlayerType.internalGetVerifier(),
                "playerName_",
                "gameName_",
                "requestedRole_",
                NodeRole.internalGetVerifier(),
              };
              String info =
                  "\u0001\u0004\u0000\u0001\u0001\u0005\u0004\u0000\u0000\u0003\u0001\u100c\u0000\u0003" +
                  "\u1508\u0001\u0004\u1508\u0002\u0005\u150c\u0003";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<JoinMsg> parser = PARSER;
            if (parser == null) {
              synchronized (JoinMsg.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<JoinMsg>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return memoizedIsInitialized;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:snakes.GameMessage.JoinMsg)
      private static final JoinMsg DEFAULT_INSTANCE;
      static {
        JoinMsg defaultInstance = new JoinMsg();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          JoinMsg.class, defaultInstance);
      }

      public static JoinMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<JoinMsg> PARSER;

      public static com.google.protobuf.Parser<JoinMsg> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface ErrorMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:snakes.GameMessage.ErrorMsg)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       * @return Whether the errorMessage field is set.
       */
      boolean hasErrorMessage();
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       * @return The errorMessage.
       */
      String getErrorMessage();
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       * @return The bytes for errorMessage.
       */
      com.google.protobuf.ByteString
          getErrorMessageBytes();
    }
    /**
     * <pre>
     * Ошибка операции (например отказ в присоединении к игре, т.к. нет места на поле)
     * </pre>
     *
     * Protobuf type {@code snakes.GameMessage.ErrorMsg}
     */
    public  static final class ErrorMsg extends
        com.google.protobuf.GeneratedMessageLite<
            ErrorMsg, ErrorMsg.Builder> implements
        // @@protoc_insertion_point(message_implements:snakes.GameMessage.ErrorMsg)
        ErrorMsgOrBuilder {
      private ErrorMsg() {
        errorMessage_ = "";
      }
      private int bitField0_;
      public static final int ERROR_MESSAGE_FIELD_NUMBER = 1;
      private String errorMessage_;
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       * @return Whether the errorMessage field is set.
       */
      @Override
      public boolean hasErrorMessage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       * @return The errorMessage.
       */
      @Override
      public String getErrorMessage() {
        return errorMessage_;
      }
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       * @return The bytes for errorMessage.
       */
      @Override
      public com.google.protobuf.ByteString
          getErrorMessageBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(errorMessage_);
      }
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       * @param value The errorMessage to set.
       */
      private void setErrorMessage(
          String value) {
        value.getClass();
  bitField0_ |= 0x00000001;
        errorMessage_ = value;
      }
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       */
      private void clearErrorMessage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        errorMessage_ = getDefaultInstance().getErrorMessage();
      }
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       * @param value The bytes for errorMessage to set.
       */
      private void setErrorMessageBytes(
          com.google.protobuf.ByteString value) {
        errorMessage_ = value.toStringUtf8();
        bitField0_ |= 0x00000001;
      }

      public static ErrorMsg parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static ErrorMsg parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static ErrorMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static ErrorMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static ErrorMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static ErrorMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static ErrorMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static ErrorMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static ErrorMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static ErrorMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static ErrorMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static ErrorMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(ErrorMsg prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Ошибка операции (например отказ в присоединении к игре, т.к. нет места на поле)
       * </pre>
       *
       * Protobuf type {@code snakes.GameMessage.ErrorMsg}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            ErrorMsg, Builder> implements
          // @@protoc_insertion_point(builder_implements:snakes.GameMessage.ErrorMsg)
          ErrorMsgOrBuilder {
        // Construct using me.ippolitov.fit.snakes.SnakesProto.GameMessage.ErrorMsg.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         *
         * <code>required string error_message = 1;</code>
         * @return Whether the errorMessage field is set.
         */
        @Override
        public boolean hasErrorMessage() {
          return instance.hasErrorMessage();
        }
        /**
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         *
         * <code>required string error_message = 1;</code>
         * @return The errorMessage.
         */
        @Override
        public String getErrorMessage() {
          return instance.getErrorMessage();
        }
        /**
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         *
         * <code>required string error_message = 1;</code>
         * @return The bytes for errorMessage.
         */
        @Override
        public com.google.protobuf.ByteString
            getErrorMessageBytes() {
          return instance.getErrorMessageBytes();
        }
        /**
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         *
         * <code>required string error_message = 1;</code>
         * @param value The errorMessage to set.
         * @return This builder for chaining.
         */
        public Builder setErrorMessage(
            String value) {
          copyOnWrite();
          instance.setErrorMessage(value);
          return this;
        }
        /**
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         *
         * <code>required string error_message = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearErrorMessage() {
          copyOnWrite();
          instance.clearErrorMessage();
          return this;
        }
        /**
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         *
         * <code>required string error_message = 1;</code>
         * @param value The bytes for errorMessage to set.
         * @return This builder for chaining.
         */
        public Builder setErrorMessageBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setErrorMessageBytes(value);
          return this;
        }

        // @@protoc_insertion_point(builder_scope:snakes.GameMessage.ErrorMsg)
      }
      private byte memoizedIsInitialized = 2;
      @Override
      @SuppressWarnings({"unchecked", "fallthrough"})
      protected final Object dynamicMethod(
          MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new ErrorMsg();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              Object[] objects = new Object[] {
                "bitField0_",
                "errorMessage_",
              };
              String info =
                  "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0001\u0001\u1508\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<ErrorMsg> parser = PARSER;
            if (parser == null) {
              synchronized (ErrorMsg.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<ErrorMsg>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return memoizedIsInitialized;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:snakes.GameMessage.ErrorMsg)
      private static final ErrorMsg DEFAULT_INSTANCE;
      static {
        ErrorMsg defaultInstance = new ErrorMsg();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          ErrorMsg.class, defaultInstance);
      }

      public static ErrorMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<ErrorMsg> PARSER;

      public static com.google.protobuf.Parser<ErrorMsg> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface RoleChangeMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:snakes.GameMessage.RoleChangeMsg)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       * @return Whether the senderRole field is set.
       */
      boolean hasSenderRole();
      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       * @return The senderRole.
       */
      NodeRole getSenderRole();

      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       * @return Whether the receiverRole field is set.
       */
      boolean hasReceiverRole();
      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       * @return The receiverRole.
       */
      NodeRole getReceiverRole();
    }
    /**
     * <pre>
     * Сообщение о смене роли:
     * 1. от заместителя другим игрокам о том, что пора начинать считать его главным (sender_role = MASTER)
     * 2. от осознанно выходящего игрока (sender_role = VIEWER)
     * 3. от главного к умершему игроку (receiver_role = VIEWER)
     * 4. в комбинации с 1,2 или отдельно от них: назначение кого-то заместителем (receiver_role = DEPUTY)
     * 5. в комбинации с 2 от главного узла заместителю о том, что он становится главным (receiver_role = MASTER)
     * </pre>
     *
     * Protobuf type {@code snakes.GameMessage.RoleChangeMsg}
     */
    public  static final class RoleChangeMsg extends
        com.google.protobuf.GeneratedMessageLite<
            RoleChangeMsg, RoleChangeMsg.Builder> implements
        // @@protoc_insertion_point(message_implements:snakes.GameMessage.RoleChangeMsg)
        RoleChangeMsgOrBuilder {
      private RoleChangeMsg() {
      }
      private int bitField0_;
      public static final int SENDER_ROLE_FIELD_NUMBER = 1;
      private int senderRole_;
      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       * @return Whether the senderRole field is set.
       */
      @Override
      public boolean hasSenderRole() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       * @return The senderRole.
       */
      @Override
      public NodeRole getSenderRole() {
        NodeRole result = NodeRole.forNumber(senderRole_);
        return result == null ? NodeRole.NORMAL : result;
      }
      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       * @param value The senderRole to set.
       */
      private void setSenderRole(NodeRole value) {
        senderRole_ = value.getNumber();
        bitField0_ |= 0x00000001;
      }
      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       */
      private void clearSenderRole() {
        bitField0_ = (bitField0_ & ~0x00000001);
        senderRole_ = 0;
      }

      public static final int RECEIVER_ROLE_FIELD_NUMBER = 2;
      private int receiverRole_;
      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       * @return Whether the receiverRole field is set.
       */
      @Override
      public boolean hasReceiverRole() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       * @return The receiverRole.
       */
      @Override
      public NodeRole getReceiverRole() {
        NodeRole result = NodeRole.forNumber(receiverRole_);
        return result == null ? NodeRole.NORMAL : result;
      }
      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       * @param value The receiverRole to set.
       */
      private void setReceiverRole(NodeRole value) {
        receiverRole_ = value.getNumber();
        bitField0_ |= 0x00000002;
      }
      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       */
      private void clearReceiverRole() {
        bitField0_ = (bitField0_ & ~0x00000002);
        receiverRole_ = 0;
      }

      public static RoleChangeMsg parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static RoleChangeMsg parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static RoleChangeMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static RoleChangeMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static RoleChangeMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static RoleChangeMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static RoleChangeMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static RoleChangeMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static RoleChangeMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static RoleChangeMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static RoleChangeMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static RoleChangeMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(RoleChangeMsg prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Сообщение о смене роли:
       * 1. от заместителя другим игрокам о том, что пора начинать считать его главным (sender_role = MASTER)
       * 2. от осознанно выходящего игрока (sender_role = VIEWER)
       * 3. от главного к умершему игроку (receiver_role = VIEWER)
       * 4. в комбинации с 1,2 или отдельно от них: назначение кого-то заместителем (receiver_role = DEPUTY)
       * 5. в комбинации с 2 от главного узла заместителю о том, что он становится главным (receiver_role = MASTER)
       * </pre>
       *
       * Protobuf type {@code snakes.GameMessage.RoleChangeMsg}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            RoleChangeMsg, Builder> implements
          // @@protoc_insertion_point(builder_implements:snakes.GameMessage.RoleChangeMsg)
          RoleChangeMsgOrBuilder {
        // Construct using me.ippolitov.fit.snakes.SnakesProto.GameMessage.RoleChangeMsg.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>optional .snakes.NodeRole sender_role = 1;</code>
         * @return Whether the senderRole field is set.
         */
        @Override
        public boolean hasSenderRole() {
          return instance.hasSenderRole();
        }
        /**
         * <code>optional .snakes.NodeRole sender_role = 1;</code>
         * @return The senderRole.
         */
        @Override
        public NodeRole getSenderRole() {
          return instance.getSenderRole();
        }
        /**
         * <code>optional .snakes.NodeRole sender_role = 1;</code>
         * @param value The enum numeric value on the wire for senderRole to set.
         * @return This builder for chaining.
         */
        public Builder setSenderRole(NodeRole value) {
          copyOnWrite();
          instance.setSenderRole(value);
          return this;
        }
        /**
         * <code>optional .snakes.NodeRole sender_role = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearSenderRole() {
          copyOnWrite();
          instance.clearSenderRole();
          return this;
        }

        /**
         * <code>optional .snakes.NodeRole receiver_role = 2;</code>
         * @return Whether the receiverRole field is set.
         */
        @Override
        public boolean hasReceiverRole() {
          return instance.hasReceiverRole();
        }
        /**
         * <code>optional .snakes.NodeRole receiver_role = 2;</code>
         * @return The receiverRole.
         */
        @Override
        public NodeRole getReceiverRole() {
          return instance.getReceiverRole();
        }
        /**
         * <code>optional .snakes.NodeRole receiver_role = 2;</code>
         * @param value The enum numeric value on the wire for receiverRole to set.
         * @return This builder for chaining.
         */
        public Builder setReceiverRole(NodeRole value) {
          copyOnWrite();
          instance.setReceiverRole(value);
          return this;
        }
        /**
         * <code>optional .snakes.NodeRole receiver_role = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearReceiverRole() {
          copyOnWrite();
          instance.clearReceiverRole();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:snakes.GameMessage.RoleChangeMsg)
      }
      @Override
      @SuppressWarnings({"unchecked", "fallthrough"})
      protected final Object dynamicMethod(
          MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new RoleChangeMsg();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              Object[] objects = new Object[] {
                "bitField0_",
                "senderRole_",
                NodeRole.internalGetVerifier(),
                "receiverRole_",
                NodeRole.internalGetVerifier(),
              };
              String info =
                  "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u100c\u0000\u0002" +
                  "\u100c\u0001";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<RoleChangeMsg> parser = PARSER;
            if (parser == null) {
              synchronized (RoleChangeMsg.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<RoleChangeMsg>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:snakes.GameMessage.RoleChangeMsg)
      private static final RoleChangeMsg DEFAULT_INSTANCE;
      static {
        RoleChangeMsg defaultInstance = new RoleChangeMsg();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          RoleChangeMsg.class, defaultInstance);
      }

      public static RoleChangeMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<RoleChangeMsg> PARSER;

      public static com.google.protobuf.Parser<RoleChangeMsg> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    private int typeCase_ = 0;
    private Object type_;
    public enum TypeCase {
      PING(2),
      STEER(3),
      ACK(4),
      STATE(5),
      ANNOUNCEMENT(6),
      JOIN(7),
      ERROR(8),
      ROLE_CHANGE(9),
      DISCOVER(12),
      TYPE_NOT_SET(0);
      private final int value;
      private TypeCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static TypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static TypeCase forNumber(int value) {
        switch (value) {
          case 2: return PING;
          case 3: return STEER;
          case 4: return ACK;
          case 5: return STATE;
          case 6: return ANNOUNCEMENT;
          case 7: return JOIN;
          case 8: return ERROR;
          case 9: return ROLE_CHANGE;
          case 12: return DISCOVER;
          case 0: return TYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @Override
    public TypeCase
    getTypeCase() {
      return TypeCase.forNumber(
          typeCase_);
    }

    private void clearType() {
      typeCase_ = 0;
      type_ = null;
    }

    public static final int MSG_SEQ_FIELD_NUMBER = 1;
    private long msgSeq_;
    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     * @return Whether the msgSeq field is set.
     */
    @Override
    public boolean hasMsgSeq() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     * @return The msgSeq.
     */
    @Override
    public long getMsgSeq() {
      return msgSeq_;
    }
    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     * @param value The msgSeq to set.
     */
    private void setMsgSeq(long value) {
      bitField0_ |= 0x00000001;
      msgSeq_ = value;
    }
    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     */
    private void clearMsgSeq() {
      bitField0_ = (bitField0_ & ~0x00000001);
      msgSeq_ = 0L;
    }

    public static final int SENDER_ID_FIELD_NUMBER = 10;
    private int senderId_;
    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     * @return Whether the senderId field is set.
     */
    @Override
    public boolean hasSenderId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     * @return The senderId.
     */
    @Override
    public int getSenderId() {
      return senderId_;
    }
    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     * @param value The senderId to set.
     */
    private void setSenderId(int value) {
      bitField0_ |= 0x00000002;
      senderId_ = value;
    }
    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     */
    private void clearSenderId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      senderId_ = 0;
    }

    public static final int RECEIVER_ID_FIELD_NUMBER = 11;
    private int receiverId_;
    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     * @return Whether the receiverId field is set.
     */
    @Override
    public boolean hasReceiverId() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     * @return The receiverId.
     */
    @Override
    public int getReceiverId() {
      return receiverId_;
    }
    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     * @param value The receiverId to set.
     */
    private void setReceiverId(int value) {
      bitField0_ |= 0x00000004;
      receiverId_ = value;
    }
    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     */
    private void clearReceiverId() {
      bitField0_ = (bitField0_ & ~0x00000004);
      receiverId_ = 0;
    }

    public static final int PING_FIELD_NUMBER = 2;
    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    @Override
    public boolean hasPing() {
      return typeCase_ == 2;
    }
    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    @Override
    public PingMsg getPing() {
      if (typeCase_ == 2) {
         return (PingMsg) type_;
      }
      return PingMsg.getDefaultInstance();
    }
    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    private void setPing(PingMsg value) {
      value.getClass();
  type_ = value;
      typeCase_ = 2;
    }
    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    private void mergePing(PingMsg value) {
      value.getClass();
  if (typeCase_ == 2 &&
          type_ != PingMsg.getDefaultInstance()) {
        type_ = PingMsg.newBuilder((PingMsg) type_)
            .mergeFrom(value).buildPartial();
      } else {
        type_ = value;
      }
      typeCase_ = 2;
    }
    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    private void clearPing() {
      if (typeCase_ == 2) {
        typeCase_ = 0;
        type_ = null;
      }
    }

    public static final int STEER_FIELD_NUMBER = 3;
    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    @Override
    public boolean hasSteer() {
      return typeCase_ == 3;
    }
    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    @Override
    public SteerMsg getSteer() {
      if (typeCase_ == 3) {
         return (SteerMsg) type_;
      }
      return SteerMsg.getDefaultInstance();
    }
    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    private void setSteer(SteerMsg value) {
      value.getClass();
  type_ = value;
      typeCase_ = 3;
    }
    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    private void mergeSteer(SteerMsg value) {
      value.getClass();
  if (typeCase_ == 3 &&
          type_ != SteerMsg.getDefaultInstance()) {
        type_ = SteerMsg.newBuilder((SteerMsg) type_)
            .mergeFrom(value).buildPartial();
      } else {
        type_ = value;
      }
      typeCase_ = 3;
    }
    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    private void clearSteer() {
      if (typeCase_ == 3) {
        typeCase_ = 0;
        type_ = null;
      }
    }

    public static final int ACK_FIELD_NUMBER = 4;
    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    @Override
    public boolean hasAck() {
      return typeCase_ == 4;
    }
    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    @Override
    public AckMsg getAck() {
      if (typeCase_ == 4) {
         return (AckMsg) type_;
      }
      return AckMsg.getDefaultInstance();
    }
    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    private void setAck(AckMsg value) {
      value.getClass();
  type_ = value;
      typeCase_ = 4;
    }
    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    private void mergeAck(AckMsg value) {
      value.getClass();
  if (typeCase_ == 4 &&
          type_ != AckMsg.getDefaultInstance()) {
        type_ = AckMsg.newBuilder((AckMsg) type_)
            .mergeFrom(value).buildPartial();
      } else {
        type_ = value;
      }
      typeCase_ = 4;
    }
    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    private void clearAck() {
      if (typeCase_ == 4) {
        typeCase_ = 0;
        type_ = null;
      }
    }

    public static final int STATE_FIELD_NUMBER = 5;
    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     */
    @Override
    public boolean hasState() {
      return typeCase_ == 5;
    }
    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     */
    @Override
    public StateMsg getState() {
      if (typeCase_ == 5) {
         return (StateMsg) type_;
      }
      return StateMsg.getDefaultInstance();
    }
    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     */
    private void setState(StateMsg value) {
      value.getClass();
  type_ = value;
      typeCase_ = 5;
    }
    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     */
    private void mergeState(StateMsg value) {
      value.getClass();
  if (typeCase_ == 5 &&
          type_ != StateMsg.getDefaultInstance()) {
        type_ = StateMsg.newBuilder((StateMsg) type_)
            .mergeFrom(value).buildPartial();
      } else {
        type_ = value;
      }
      typeCase_ = 5;
    }
    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     */
    private void clearState() {
      if (typeCase_ == 5) {
        typeCase_ = 0;
        type_ = null;
      }
    }

    public static final int ANNOUNCEMENT_FIELD_NUMBER = 6;
    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    @Override
    public boolean hasAnnouncement() {
      return typeCase_ == 6;
    }
    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    @Override
    public AnnouncementMsg getAnnouncement() {
      if (typeCase_ == 6) {
         return (AnnouncementMsg) type_;
      }
      return AnnouncementMsg.getDefaultInstance();
    }
    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    private void setAnnouncement(AnnouncementMsg value) {
      value.getClass();
  type_ = value;
      typeCase_ = 6;
    }
    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    private void mergeAnnouncement(AnnouncementMsg value) {
      value.getClass();
  if (typeCase_ == 6 &&
          type_ != AnnouncementMsg.getDefaultInstance()) {
        type_ = AnnouncementMsg.newBuilder((AnnouncementMsg) type_)
            .mergeFrom(value).buildPartial();
      } else {
        type_ = value;
      }
      typeCase_ = 6;
    }
    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    private void clearAnnouncement() {
      if (typeCase_ == 6) {
        typeCase_ = 0;
        type_ = null;
      }
    }

    public static final int JOIN_FIELD_NUMBER = 7;
    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    @Override
    public boolean hasJoin() {
      return typeCase_ == 7;
    }
    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    @Override
    public JoinMsg getJoin() {
      if (typeCase_ == 7) {
         return (JoinMsg) type_;
      }
      return JoinMsg.getDefaultInstance();
    }
    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    private void setJoin(JoinMsg value) {
      value.getClass();
  type_ = value;
      typeCase_ = 7;
    }
    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    private void mergeJoin(JoinMsg value) {
      value.getClass();
  if (typeCase_ == 7 &&
          type_ != JoinMsg.getDefaultInstance()) {
        type_ = JoinMsg.newBuilder((JoinMsg) type_)
            .mergeFrom(value).buildPartial();
      } else {
        type_ = value;
      }
      typeCase_ = 7;
    }
    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    private void clearJoin() {
      if (typeCase_ == 7) {
        typeCase_ = 0;
        type_ = null;
      }
    }

    public static final int ERROR_FIELD_NUMBER = 8;
    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    @Override
    public boolean hasError() {
      return typeCase_ == 8;
    }
    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    @Override
    public ErrorMsg getError() {
      if (typeCase_ == 8) {
         return (ErrorMsg) type_;
      }
      return ErrorMsg.getDefaultInstance();
    }
    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    private void setError(ErrorMsg value) {
      value.getClass();
  type_ = value;
      typeCase_ = 8;
    }
    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    private void mergeError(ErrorMsg value) {
      value.getClass();
  if (typeCase_ == 8 &&
          type_ != ErrorMsg.getDefaultInstance()) {
        type_ = ErrorMsg.newBuilder((ErrorMsg) type_)
            .mergeFrom(value).buildPartial();
      } else {
        type_ = value;
      }
      typeCase_ = 8;
    }
    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    private void clearError() {
      if (typeCase_ == 8) {
        typeCase_ = 0;
        type_ = null;
      }
    }

    public static final int ROLE_CHANGE_FIELD_NUMBER = 9;
    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    @Override
    public boolean hasRoleChange() {
      return typeCase_ == 9;
    }
    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    @Override
    public RoleChangeMsg getRoleChange() {
      if (typeCase_ == 9) {
         return (RoleChangeMsg) type_;
      }
      return RoleChangeMsg.getDefaultInstance();
    }
    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    private void setRoleChange(RoleChangeMsg value) {
      value.getClass();
  type_ = value;
      typeCase_ = 9;
    }
    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    private void mergeRoleChange(RoleChangeMsg value) {
      value.getClass();
  if (typeCase_ == 9 &&
          type_ != RoleChangeMsg.getDefaultInstance()) {
        type_ = RoleChangeMsg.newBuilder((RoleChangeMsg) type_)
            .mergeFrom(value).buildPartial();
      } else {
        type_ = value;
      }
      typeCase_ = 9;
    }
    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    private void clearRoleChange() {
      if (typeCase_ == 9) {
        typeCase_ = 0;
        type_ = null;
      }
    }

    public static final int DISCOVER_FIELD_NUMBER = 12;
    /**
     * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
     */
    @Override
    public boolean hasDiscover() {
      return typeCase_ == 12;
    }
    /**
     * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
     */
    @Override
    public DiscoverMsg getDiscover() {
      if (typeCase_ == 12) {
         return (DiscoverMsg) type_;
      }
      return DiscoverMsg.getDefaultInstance();
    }
    /**
     * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
     */
    private void setDiscover(DiscoverMsg value) {
      value.getClass();
  type_ = value;
      typeCase_ = 12;
    }
    /**
     * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
     */
    private void mergeDiscover(DiscoverMsg value) {
      value.getClass();
  if (typeCase_ == 12 &&
          type_ != DiscoverMsg.getDefaultInstance()) {
        type_ = DiscoverMsg.newBuilder((DiscoverMsg) type_)
            .mergeFrom(value).buildPartial();
      } else {
        type_ = value;
      }
      typeCase_ = 12;
    }
    /**
     * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
     */
    private void clearDiscover() {
      if (typeCase_ == 12) {
        typeCase_ = 0;
        type_ = null;
      }
    }

    public static GameMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GameMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GameMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GameMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GameMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static GameMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GameMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GameMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(GameMessage prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Общий формат любого UDP-сообщения
     * </pre>
     *
     * Protobuf type {@code snakes.GameMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          GameMessage, Builder> implements
        // @@protoc_insertion_point(builder_implements:snakes.GameMessage)
        GameMessageOrBuilder {
      // Construct using me.ippolitov.fit.snakes.SnakesProto.GameMessage.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @Override
      public TypeCase
          getTypeCase() {
        return instance.getTypeCase();
      }

      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }


      /**
       * <pre>
       * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
       * </pre>
       *
       * <code>required int64 msg_seq = 1;</code>
       * @return Whether the msgSeq field is set.
       */
      @Override
      public boolean hasMsgSeq() {
        return instance.hasMsgSeq();
      }
      /**
       * <pre>
       * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
       * </pre>
       *
       * <code>required int64 msg_seq = 1;</code>
       * @return The msgSeq.
       */
      @Override
      public long getMsgSeq() {
        return instance.getMsgSeq();
      }
      /**
       * <pre>
       * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
       * </pre>
       *
       * <code>required int64 msg_seq = 1;</code>
       * @param value The msgSeq to set.
       * @return This builder for chaining.
       */
      public Builder setMsgSeq(long value) {
        copyOnWrite();
        instance.setMsgSeq(value);
        return this;
      }
      /**
       * <pre>
       * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
       * </pre>
       *
       * <code>required int64 msg_seq = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMsgSeq() {
        copyOnWrite();
        instance.clearMsgSeq();
        return this;
      }

      /**
       * <pre>
       * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       *
       * <code>optional int32 sender_id = 10;</code>
       * @return Whether the senderId field is set.
       */
      @Override
      public boolean hasSenderId() {
        return instance.hasSenderId();
      }
      /**
       * <pre>
       * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       *
       * <code>optional int32 sender_id = 10;</code>
       * @return The senderId.
       */
      @Override
      public int getSenderId() {
        return instance.getSenderId();
      }
      /**
       * <pre>
       * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       *
       * <code>optional int32 sender_id = 10;</code>
       * @param value The senderId to set.
       * @return This builder for chaining.
       */
      public Builder setSenderId(int value) {
        copyOnWrite();
        instance.setSenderId(value);
        return this;
      }
      /**
       * <pre>
       * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       *
       * <code>optional int32 sender_id = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearSenderId() {
        copyOnWrite();
        instance.clearSenderId();
        return this;
      }

      /**
       * <pre>
       * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       *
       * <code>optional int32 receiver_id = 11;</code>
       * @return Whether the receiverId field is set.
       */
      @Override
      public boolean hasReceiverId() {
        return instance.hasReceiverId();
      }
      /**
       * <pre>
       * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       *
       * <code>optional int32 receiver_id = 11;</code>
       * @return The receiverId.
       */
      @Override
      public int getReceiverId() {
        return instance.getReceiverId();
      }
      /**
       * <pre>
       * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       *
       * <code>optional int32 receiver_id = 11;</code>
       * @param value The receiverId to set.
       * @return This builder for chaining.
       */
      public Builder setReceiverId(int value) {
        copyOnWrite();
        instance.setReceiverId(value);
        return this;
      }
      /**
       * <pre>
       * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       *
       * <code>optional int32 receiver_id = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearReceiverId() {
        copyOnWrite();
        instance.clearReceiverId();
        return this;
      }

      /**
       * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      @Override
      public boolean hasPing() {
        return instance.hasPing();
      }
      /**
       * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      @Override
      public PingMsg getPing() {
        return instance.getPing();
      }
      /**
       * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public Builder setPing(PingMsg value) {
        copyOnWrite();
        instance.setPing(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public Builder setPing(
          PingMsg.Builder builderForValue) {
        copyOnWrite();
        instance.setPing(builderForValue.build());
        return this;
      }
      /**
       * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public Builder mergePing(PingMsg value) {
        copyOnWrite();
        instance.mergePing(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public Builder clearPing() {
        copyOnWrite();
        instance.clearPing();
        return this;
      }

      /**
       * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      @Override
      public boolean hasSteer() {
        return instance.hasSteer();
      }
      /**
       * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      @Override
      public SteerMsg getSteer() {
        return instance.getSteer();
      }
      /**
       * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public Builder setSteer(SteerMsg value) {
        copyOnWrite();
        instance.setSteer(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public Builder setSteer(
          SteerMsg.Builder builderForValue) {
        copyOnWrite();
        instance.setSteer(builderForValue.build());
        return this;
      }
      /**
       * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public Builder mergeSteer(SteerMsg value) {
        copyOnWrite();
        instance.mergeSteer(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public Builder clearSteer() {
        copyOnWrite();
        instance.clearSteer();
        return this;
      }

      /**
       * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      @Override
      public boolean hasAck() {
        return instance.hasAck();
      }
      /**
       * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      @Override
      public AckMsg getAck() {
        return instance.getAck();
      }
      /**
       * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public Builder setAck(AckMsg value) {
        copyOnWrite();
        instance.setAck(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public Builder setAck(
          AckMsg.Builder builderForValue) {
        copyOnWrite();
        instance.setAck(builderForValue.build());
        return this;
      }
      /**
       * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public Builder mergeAck(AckMsg value) {
        copyOnWrite();
        instance.mergeAck(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public Builder clearAck() {
        copyOnWrite();
        instance.clearAck();
        return this;
      }

      /**
       * <code>.snakes.GameMessage.StateMsg state = 5;</code>
       */
      @Override
      public boolean hasState() {
        return instance.hasState();
      }
      /**
       * <code>.snakes.GameMessage.StateMsg state = 5;</code>
       */
      @Override
      public StateMsg getState() {
        return instance.getState();
      }
      /**
       * <code>.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public Builder setState(StateMsg value) {
        copyOnWrite();
        instance.setState(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public Builder setState(
          StateMsg.Builder builderForValue) {
        copyOnWrite();
        instance.setState(builderForValue.build());
        return this;
      }
      /**
       * <code>.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public Builder mergeState(StateMsg value) {
        copyOnWrite();
        instance.mergeState(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public Builder clearState() {
        copyOnWrite();
        instance.clearState();
        return this;
      }

      /**
       * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      @Override
      public boolean hasAnnouncement() {
        return instance.hasAnnouncement();
      }
      /**
       * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      @Override
      public AnnouncementMsg getAnnouncement() {
        return instance.getAnnouncement();
      }
      /**
       * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public Builder setAnnouncement(AnnouncementMsg value) {
        copyOnWrite();
        instance.setAnnouncement(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public Builder setAnnouncement(
          AnnouncementMsg.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnouncement(builderForValue.build());
        return this;
      }
      /**
       * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public Builder mergeAnnouncement(AnnouncementMsg value) {
        copyOnWrite();
        instance.mergeAnnouncement(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public Builder clearAnnouncement() {
        copyOnWrite();
        instance.clearAnnouncement();
        return this;
      }

      /**
       * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      @Override
      public boolean hasJoin() {
        return instance.hasJoin();
      }
      /**
       * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      @Override
      public JoinMsg getJoin() {
        return instance.getJoin();
      }
      /**
       * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public Builder setJoin(JoinMsg value) {
        copyOnWrite();
        instance.setJoin(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public Builder setJoin(
          JoinMsg.Builder builderForValue) {
        copyOnWrite();
        instance.setJoin(builderForValue.build());
        return this;
      }
      /**
       * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public Builder mergeJoin(JoinMsg value) {
        copyOnWrite();
        instance.mergeJoin(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public Builder clearJoin() {
        copyOnWrite();
        instance.clearJoin();
        return this;
      }

      /**
       * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      @Override
      public boolean hasError() {
        return instance.hasError();
      }
      /**
       * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      @Override
      public ErrorMsg getError() {
        return instance.getError();
      }
      /**
       * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public Builder setError(ErrorMsg value) {
        copyOnWrite();
        instance.setError(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public Builder setError(
          ErrorMsg.Builder builderForValue) {
        copyOnWrite();
        instance.setError(builderForValue.build());
        return this;
      }
      /**
       * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public Builder mergeError(ErrorMsg value) {
        copyOnWrite();
        instance.mergeError(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public Builder clearError() {
        copyOnWrite();
        instance.clearError();
        return this;
      }

      /**
       * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      @Override
      public boolean hasRoleChange() {
        return instance.hasRoleChange();
      }
      /**
       * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      @Override
      public RoleChangeMsg getRoleChange() {
        return instance.getRoleChange();
      }
      /**
       * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public Builder setRoleChange(RoleChangeMsg value) {
        copyOnWrite();
        instance.setRoleChange(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public Builder setRoleChange(
          RoleChangeMsg.Builder builderForValue) {
        copyOnWrite();
        instance.setRoleChange(builderForValue.build());
        return this;
      }
      /**
       * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public Builder mergeRoleChange(RoleChangeMsg value) {
        copyOnWrite();
        instance.mergeRoleChange(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public Builder clearRoleChange() {
        copyOnWrite();
        instance.clearRoleChange();
        return this;
      }

      /**
       * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
       */
      @Override
      public boolean hasDiscover() {
        return instance.hasDiscover();
      }
      /**
       * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
       */
      @Override
      public DiscoverMsg getDiscover() {
        return instance.getDiscover();
      }
      /**
       * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
       */
      public Builder setDiscover(DiscoverMsg value) {
        copyOnWrite();
        instance.setDiscover(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
       */
      public Builder setDiscover(
          DiscoverMsg.Builder builderForValue) {
        copyOnWrite();
        instance.setDiscover(builderForValue.build());
        return this;
      }
      /**
       * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
       */
      public Builder mergeDiscover(DiscoverMsg value) {
        copyOnWrite();
        instance.mergeDiscover(value);
        return this;
      }
      /**
       * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
       */
      public Builder clearDiscover() {
        copyOnWrite();
        instance.clearDiscover();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:snakes.GameMessage)
    }
    private byte memoizedIsInitialized = 2;
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new GameMessage();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "type_",
              "typeCase_",
              "bitField0_",
              "msgSeq_",
              PingMsg.class,
              SteerMsg.class,
              AckMsg.class,
              StateMsg.class,
              AnnouncementMsg.class,
              JoinMsg.class,
              ErrorMsg.class,
              RoleChangeMsg.class,
              "senderId_",
              "receiverId_",
              DiscoverMsg.class,
            };
            String info =
                "\u0001\f\u0001\u0001\u0001\f\f\u0000\u0000\u0006\u0001\u1502\u0000\u0002\u103c\u0000" +
                "\u0003\u143c\u0000\u0004\u103c\u0000\u0005\u143c\u0000\u0006\u143c\u0000\u0007\u143c" +
                "\u0000\b\u143c\u0000\t\u103c\u0000\n\u1004\u0001\u000b\u1004\u0002\f\u103c\u0000" +
                "";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<GameMessage> parser = PARSER;
          if (parser == null) {
            synchronized (GameMessage.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<GameMessage>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:snakes.GameMessage)
    private static final GameMessage DEFAULT_INSTANCE;
    static {
      GameMessage defaultInstance = new GameMessage();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        GameMessage.class, defaultInstance);
    }

    public static GameMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GameMessage> PARSER;

    public static com.google.protobuf.Parser<GameMessage> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
